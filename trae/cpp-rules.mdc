# C++ 代码规范

## 1. 项目结构
- 遵循模块化设计，头文件与源文件分离。
- 推荐项目结构：
  ```
  project/
  ├── include/            # 公共头文件
  │   └── project/        # 项目命名空间头文件
  ├── src/                # 源文件
  ├── test/               # 测试代码
  ├── docs/               # 文档
  ├── examples/           # 示例代码
  ├── third_party/        # 第三方库
  └── build/              # 构建产物
  ```
- 头文件统一放在include目录，源文件放在src目录。

## 2. 命名规范
- 文件名、变量、函数名使用小写字母，单词间下划线分隔。
- 类名、结构体名使用大驼峰（PascalCase）。
- 宏名全大写，单词间下划线分隔。
- 命名空间避免冲突，推荐分层命名。

## 3. 代码风格
- 遵循Google C++风格指南。
- 每行不超过100字符。
- 使用4空格缩进，不使用Tab。
- 大括号不换行。
- 注释规范，复杂逻辑需有注释，推荐使用Doxygen风格。
- 推荐使用现代C++特性（如智能指针、范围for、RAII等）。
- 避免在头文件中使用using namespace。

## 4. 依赖管理
- 推荐使用CMake统一管理依赖和构建。
- 第三方库放在third_party目录，避免污染主项目。

## 5. 文档规范
- 每个类、函数需有Doxygen注释。
- 项目需包含README.md、CHANGELOG.md、/docs目录。
- 推荐使用Doxygen生成API文档。

## 6. 最佳实践

### 代码组织
- 每个类/模块职责单一，避免大文件和大函数。
- 公共逻辑抽取为独立库或工具类，便于复用。
- 目录结构清晰，便于扩展和维护。

### 性能优化
- 优先使用栈内存，减少堆分配。
- 合理使用智能指针，避免内存泄漏。
- 使用move语义和右值引用优化对象转移。
- 避免不必要的拷贝和临时对象。
- 选择合适的数据结构（如vector、unordered_map等）。

### 安全性
- 使用RAII管理资源，防止泄漏。
- 避免裸指针，优先使用智能指针。
- 输入参数做有效性检查，防止越界和未定义行为。
- 避免使用C风格字符串和不安全函数。

### 测试
- 单元测试覆盖核心逻辑，推荐使用GoogleTest等框架。
- 自动化集成测试，保证主要功能稳定。
- 关键路径增加断言和日志，便于排查问题。

### 设计模式
- 适当使用工厂、单例、观察者、策略等设计模式提升可维护性。
- 复杂模块建议先画UML图或伪代码。

### 工具链推荐
- 编译：g++/clang++
- 构建：CMake
- 静态检查：clang-tidy、cppcheck
- 格式化：clang-format
- 文档：Doxygen
- 单元测试：GoogleTest、Catch2
- 注意资源管理与异常安全，遵循RAII原则。
- 错误处理要规范，优先使用异常或返回值。