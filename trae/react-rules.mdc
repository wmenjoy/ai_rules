# React 代码规范

## 1. 项目结构
- 遵循组件化开发，组件放在components目录。
- 页面级组件放在pages目录，hooks放在hooks目录。
- 公共方法和工具函数放在utils目录。

## 2. 命名规范
- 组件名、类名使用大驼峰（PascalCase）。
- 变量、函数名使用小驼峰（camelCase）。
- props、state字段名使用小驼峰。

## 3. 代码风格
- 每行不超过120字符。
- 使用2空格缩进。
- 必须有必要的注释。
- 推荐使用TypeScript增强类型安全。

## 4. 依赖管理
- 推荐使用pnpm/yarn统一管理依赖。
- 固定依赖版本。

## 5. 其他
- 推荐使用函数组件和Hooks。
- 组件通信优先使用props，复杂场景用Context/Redux。
- 推荐使用eslint、prettier自动格式化和检查。

## 6. 编码规范
- TypeScript 规范：
  - 启用严格模式（strict: true）
  - 声明所有变量类型，避免 any
  - 优先使用 interface 定义对象类型
  - 使用 type 定义联合类型和工具类型
  - 使用泛型增强代码复用和类型安全
- React 组件规范：
  - 单一职责原则，每个组件只做一件事
  - 组件文件最大 300 行，超出需拆分
  - 复杂组件逻辑抽取为自定义 Hooks
  - Props 必须定义类型和必要的默认值
  - 优先使用受控组件
  - 避免过深组件树（最多 3-4 层嵌套）
- Hooks 规范：
  - 遵循 Hooks 调用规则（顶层调用，不在条件/循环中）
  - 依赖数组包含所有使用的外部变量
  - 使用 useCallback/useMemo 优化性能
  - 抽取复杂逻辑为自定义 Hooks
- 代码质量：
  - 变量和函数命名具有明确含义
  - 代码缩进统一 2 空格
  - 行尾使用分号
  - 字符串优先使用单引号
  - 对象属性简写
  - 避免过深嵌套（最多 3 层）
  - 使用常量代替魔法数字

## 7. 文档规范
- 组件文档：
  - 推荐使用 Storybook 维护交互式组件文档
  - 每个组件文档必须包含：
    - 组件描述
    - Props 表格
    - 典型用例
    - 变体展示
    - 交互演示
- 项目文档：
  - README.md - 项目概述和开发指南
  - CONTRIBUTING.md - 贡献指南
  - CHANGELOG.md - 版本变更记录
  - /docs 目录 - 详细文档

## 8. 最佳实践

### 代码组织
- 每个组件职责单一，避免大文件和大组件。
- 公共逻辑抽取为自定义Hooks或工具函数，便于复用。
- 目录结构清晰，便于扩展和查找。

### 性能优化
- 使用React.memo、useMemo、useCallback优化性能，避免不必要的渲染。
- 合理拆分组件，减少渲染范围。
- 使用虚拟列表（如react-window）处理大数据量渲染。
- 懒加载路由和组件，提升首屏速度。

### 安全性
- 所有外部输入进行校验，防止XSS等安全问题。
- 避免直接操作DOM，优先使用React提供的API。
- 使用依赖锁定，避免引入有安全漏洞的包。

### 测试
- 单元测试覆盖核心逻辑，推荐使用Jest、React Testing Library。
- 自动化集成测试，保证主要功能不被破坏。
- 关键路径增加断言和日志，便于定位问题。

### 设计模式
- 适当使用高阶组件、Render Props、组合模式等提升复用性。
- 复杂组件建议先画组件树或伪代码。

### 工具链推荐
- 构建工具：Vite、Webpack、Create React App
- 依赖管理：pnpm、yarn
- 静态检查：eslint、stylelint
- 格式化：prettier
- 文档：Storybook、jsdoc
- 单元测试：Jest、React Testing Library

### 错误处理
- API 请求错误统一封装处理，推荐使用axios拦截器或fetch封装，捕获异常并友好提示。
- 组件内部异常建议使用Error Boundary进行捕获，必要时上报错误。
- 前端全局错误可通过window.onerror、window.addEventListener('unhandledrejection')捕获，结合Sentry等工具进行监控和告警。
- 用户操作错误及时反馈，采用弹窗、Toast等方式提示。
- 日志分级记录（error/warn/info），开发环境详细输出，生产环境仅保留必要信息。
- 关键路径增加断言和日志，便于定位问题。