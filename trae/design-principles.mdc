# 通用编程设计原则

## 1. 核心设计原则

### SOLID原则
- **S**ingle Responsibility Principle (单一职责原则)
- **O**pen/Closed Principle (开闭原则)
- **L**iskov Substitution Principle (里氏替换原则)
- **I**nterface Segregation Principle (接口隔离原则)
- **D**ependency Inversion Principle (依赖倒置原则)

### 其他关键原则
- DRY (Don't Repeat Yourself)
- KISS (Keep It Simple, Stupid)
- YAGNI (You Aren't Gonna Need It)
- Law of Demeter (迪米特法则)

## 2. AI辅助编码最佳实践

### 提示工程
- 提供清晰的上下文和约束条件
- 分步骤描述需求
- 明确输入输出格式
- 指定技术栈和版本

### 代码审查
- 验证AI生成代码的正确性
- 检查安全漏洞
- 确保符合项目规范
- 性能优化

## 3. 错误处理流程

### 防御性编程
- 输入验证
- 异常处理
- 日志记录
- 优雅降级

### 调试技巧
- 最小化复现步骤
- 日志分析
- 单元测试
- 性能分析

## 4. UX设计指南

### API设计
- 一致的命名规范
- 合理的状态码
- 清晰的错误信息
- 版本控制

### 用户界面
- 一致性原则
- 反馈机制
- 可访问性
- 渐进式披露

## 5. 安全编程技巧

### 输入安全
- 严格的输入验证（白名单优于黑名单）
- 参数化查询防止SQL注入
- 防范XSS攻击（输出编码）
- 文件上传验证（类型、大小、内容）

### 数据安全
- 敏感数据加密存储（AES-256等）
- 密码哈希处理（bcrypt/PBKDF2）
- 最小化数据收集和保留
- 数据脱敏展示

### 通信安全
- 强制HTTPS/TLS加密
- HSTS头部设置
- 安全的Cookie属性（Secure, HttpOnly）
- CSRF防护措施

### 权限控制
- 最小权限原则
- 基于角色的访问控制（RBAC）
- 定期权限审查
- 多因素认证（MFA）

### 安全开发实践
- 依赖库漏洞扫描（OWASP Dependency Check）
- 安全代码审查
- 自动化安全测试（SAST/DAST）
- 安全日志和监控