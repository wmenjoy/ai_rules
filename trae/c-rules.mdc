# C 代码规范

## 1. 项目结构
- 遵循模块化设计，源文件与头文件分离。
- 推荐项目结构：
  ```
  project/
  ├── include/            # 公共头文件
  │   └── project/        # 项目特定头文件
  ├── src/                # 源文件
  ├── tests/              # 测试代码
  ├── docs/               # 文档
  ├── examples/           # 示例代码
  ├── lib/                # 第三方库
  └── build/              # 构建产物
  ```
- 头文件统一放在include目录，源文件放在src目录。

## 2. 命名规范
- 文件名、变量、函数名使用小写字母，单词间下划线分隔（snake_case）。
- 宏名全大写，单词间下划线分隔。
- 类型名使用大驼峰（PascalCase）或snake_case_t。
- 结构体、类型名通常以_t结尾。

## 3. 代码风格
- 遵循C99/C11标准。
- 每行不超过100字符。
- 使用4空格缩进，不使用Tab。
- 大括号不换行。
- 注释规范，复杂逻辑需有注释，推荐使用Doxygen风格。
- 头文件使用保护宏防止重复包含。
- 避免在头文件中包含不必要的依赖。

## 4. 依赖管理
- 推荐使用Makefile或CMake统一管理编译依赖。
- 第三方库放在lib目录，避免污染主项目。
java
## 5. 文档规范
- 每个模块、函数需有Doxygen注释。
- 项目需包含README.md、CHANGELOG.md、/docs目录。
- 推荐使用Doxygen生成API文档。

## 6. 编码规范
- 推荐使用clang-format、cppcheck等工具静态检查。
- 单元测试放在tests目录，测试文件以_test.c结尾。
- 避免魔法数字，使用宏或const定义。
- 注意内存管理，及时释放资源。
- 错误处理要规范，返回值统一，避免裸return。

## 7. 最佳实践

### 代码组织
- 保持每个模块职责单一，避免大文件和大函数。
- 公共代码抽取为独立模块或库，便于复用和维护。
- 目录结构清晰，便于查找和扩展。

### 性能优化
- 优先使用局部变量，减少全局变量。
- 内存分配后及时释放，避免内存泄漏。
- 避免不必要的内存拷贝和重复计算。
- 使用高效的数据结构（如链表、哈希表等）。

### 安全性
- 所有输入参数进行有效性检查，防止缓冲区溢出。
- 避免使用不安全的函数（如gets、strcpy等），推荐使用安全版本（如fgets、strncpy）。
- 注意整数溢出、空指针解引用等常见安全问题。

### 测试
- 单元测试覆盖核心逻辑，推荐使用CMock等测试框架。
- 自动化集成测试，保证主要功能不被破坏。
- 关键路径增加断言和日志，便于定位问题。

### 设计模式
- 适当使用工厂、单例、观察者等经典设计模式提升代码可维护性。
- 复杂模块建议先画流程图或伪代码。

### 工具链推荐
- 编译：gcc/clang
- 构建：Makefile/CMake
- 静态检查：cppcheck、splint
- 格式化：clang-format
- 文档：Doxygen
- 单元测试：CMock、Unity