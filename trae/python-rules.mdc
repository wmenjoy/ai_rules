# Python 代码规范

## 1. 项目结构
- 遵循PEP 8推荐的包与模块结构。
- 推荐项目结构：
  ```
  project/
  ├── project/           # 主包
  │   ├── __init__.py    # 包初始化文件
  │   ├── module1.py     # 模块
  │   ├── module2.py     # 模块
  │   └── subpackage/    # 子包
  │       ├── __init__.py
  │       └── module3.py
  ├── tests/             # 测试代码
  ├── docs/              # 文档
  ├── examples/          # 示例代码
  ├── requirements.txt   # 依赖文件
  ├── setup.py           # 安装脚本
  └── README.md          # 项目说明
  ```
- 入口文件为main.py或app.py。

## 2. 命名规范
- 包、模块、变量、函数名使用小写字母，单词间下划线分隔（snake_case）。
- 类名使用大驼峰（PascalCase）。
- 常量全大写，单词间下划线分隔。
- 保护成员用单下划线前缀，私有成员用双下划线前缀。

## 3. 代码风格
- 遵循 [PEP 8](https://www.python.org/dev/peps/pep-0008) 规范。
- 每行代码长度不超过79字符（文档字符串或注释不超过72字符）。
- 使用4空格缩进，不使用Tab。
- 使用空行分隔函数和类。
- 使用UTF-8编码。
- 导入顺序：标准库、第三方库、本地库。
- 每个导入占一行。
- 注释规范，复杂逻辑需有注释，推荐使用类型注解。

## 4. 依赖管理
- 推荐使用requirements.txt、poetry或conda统一管理依赖。
- 固定依赖版本。
- 使用虚拟环境隔离依赖。

## 5. 文档规范
- 每个模块、类、函数需有docstring，遵循PEP 257。
- 项目需包含README.md、CHANGELOG.md、/docs目录。
- 推荐使用Sphinx或mkdocs生成文档。

## 6. 编码规范
- 推荐使用黑格式化工具（black）、静态检查（flake8/pylint/mypy）。
- 单元测试放在tests目录，测试用例命名以test_开头。
- 避免魔法数字，使用常量。
- 错误处理要规范，避免裸except。
- 推荐使用类型注解和类型检查工具。

## 7. 最佳实践

### 代码组织
- 每个模块职责单一，避免大文件和大函数。
- 公共逻辑抽取为独立模块或包，便于复用和维护。
- 目录结构清晰，便于扩展和查找。

### 性能优化
- 优先使用生成器、迭代器处理大数据。
- 合理使用缓存（如functools.lru_cache）提升性能。
- 避免不必要的全局变量和重复计算。
- 选择合适的数据结构（如dict、set、collections等）。

### 安全性
- 所有输入参数进行有效性检查。
- 避免eval、exec等高危函数。
- 注意SQL注入、XSS等常见安全问题。
- 避免硬编码敏感信息。

### 测试
- 单元测试覆盖核心逻辑，推荐使用pytest、unittest等框架。
- 自动化集成测试，保证主要功能不被破坏。
- 关键路径增加断言和日志，便于定位问题。

### 设计模式
- 适当使用工厂、单例、装饰器等设计模式提升可维护性。
- 复杂模块建议先画流程图或伪代码。

### 工具链推荐
- 依赖管理：pip、poetry、conda
- 静态检查：flake8、pylint、mypy
- 格式化：black、isort
- 文档：Sphinx、mkdocs
- 单元测试：pytest、unittest