# Java编程规范实施检查清单
> 基于详细规范的具体实施步骤和验证标准

## 🎯 实施阶段规划

### 阶段1：基础环境搭建 [Week 1-2]

#### 1.1 开发环境配置 [MUST - L1]
- [ ] **IDE配置**
  - [ ] IntelliJ IDEA代码格式化配置导入
  - [ ] CheckStyle插件安装和规则配置
  - [ ] PMD插件安装和规则配置
  - [ ] SonarLint插件安装和连接
  - [ ] 代码模板配置（类、方法、注释模板）

- [ ] **项目构建配置**
  - [ ] Maven/Gradle构建脚本更新
  - [ ] CheckStyle插件集成
  - [ ] PMD插件集成
  - [ ] SpotBugs插件集成
  - [ ] JaCoCo代码覆盖率插件集成

- [ ] **代码质量工具配置**
  ```xml
  <!-- Maven配置示例 -->
  <plugin>
      <groupId>org.apache.maven.plugins</groupId>
      <artifactId>maven-checkstyle-plugin</artifactId>
      <version>3.2.0</version>
      <configuration>
          <configLocation>checkstyle.xml</configLocation>
          <encoding>UTF-8</encoding>
          <consoleOutput>true</consoleOutput>
          <failsOnError>true</failsOnError>
      </configuration>
  </plugin>
  ```

#### 1.2 CI/CD流水线集成 [MUST - L1]
- [ ] **GitHub Actions/Jenkins配置**
  - [ ] 代码质量检查阶段添加
  - [ ] 测试覆盖率报告生成
  - [ ] SonarQube质量门禁集成
  - [ ] 失败时构建中断配置

```yaml
# GitHub Actions示例
name: Code Quality Check
on: [push, pull_request]
jobs:
  quality-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          
      - name: Run CheckStyle
        run: mvn checkstyle:check
        
      - name: Run PMD
        run: mvn pmd:check
        
      - name: Run Tests
        run: mvn clean test jacoco:report
        
      - name: SonarQube Analysis
        run: mvn sonar:sonar
```

### 阶段2：核心规范实施 [Week 3-4]

#### 2.1 编码规范验证 [MUST - L1]
- [ ] **格式化规范检查**
  - [ ] 缩进：4个空格，无Tab字符
  - [ ] 行长度：不超过120字符
  - [ ] 大括号：K&R风格
  - [ ] 空行：方法间1行，逻辑块间1行

- [ ] **命名规范检查**
  - [ ] 类名：PascalCase，意义明确
  - [ ] 方法名：camelCase，动词开头
  - [ ] 变量名：camelCase，名词性
  - [ ] 常量名：UPPER_SNAKE_CASE
  - [ ] 包名：全小写，反向域名

- [ ] **代码质量指标**
  - [ ] 方法参数数量 ≤ 5个
  - [ ] 方法长度 ≤ 50行
  - [ ] 类长度 ≤ 500行
  - [ ] 圈复杂度 ≤ 10
  - [ ] 认知复杂度 ≤ 15

#### 2.2 异常处理规范 [MUST - L1]
```java
// [AI-BLOCK-START] - 生成工具: 检查清单 v1.0
// ✅ 检查项目
// 1. 自定义异常继承RuntimeException
// 2. 异常包含错误码和明确消息
// 3. 异常链正确传递
// 4. 日志记录完整
// 5. 敏感信息不暴露

// 验证示例
@Test
public void testExceptionHandling() {
    // 验证异常类型
    assertThrows(BusinessException.class, () -> {
        userService.createUser(invalidRequest);
    });
    
    // 验证错误码
    BusinessException ex = assertThrows(BusinessException.class, () -> {
        userService.createUser(invalidRequest);
    });
    assertEquals("USER_EMAIL_EXISTS", ex.getErrorCode());
    
    // 验证日志记录
    verify(logger).error(contains("Failed to create user"), any(Exception.class));
}
// [AI-BLOCK-END]
```

### 阶段3：框架规范实施 [Week 5-6]

#### 3.1 Spring Boot规范验证 [MUST - L1]
- [ ] **Controller层检查**
  - [ ] RESTful API路径规范
  - [ ] 参数验证注解完整
  - [ ] 统一响应格式使用
  - [ ] 异常处理完整覆盖
  - [ ] 日志记录规范

- [ ] **Service层检查**
  - [ ] 事务注解正确使用
  - [ ] 业务逻辑封装合理
  - [ ] 依赖注入规范（构造器注入）
  - [ ] 异常转换适当
  - [ ] 参数验证完整

- [ ] **Repository层检查**
  - [ ] 方法命名规范
  - [ ] 查询优化合理
  - [ ] 分页查询正确
  - [ ] 动态查询实现
  - [ ] 索引设计合理

#### 3.2 数据层规范验证 [MUST - L1]
```sql
-- [AI-BLOCK-START] - 生成工具: 检查清单 v1.0
-- ✅ SQL质量检查清单
-- 1. 查询字段明确指定，避免SELECT *
-- 2. WHERE条件使用索引字段
-- 3. JOIN操作合理，避免笛卡尔积
-- 4. 分页查询使用LIMIT和OFFSET
-- 5. 更新和删除操作有WHERE条件
-- 6. 批量操作使用事务

-- 验证脚本示例
EXPLAIN SELECT 
    u.id, u.username, u.email 
FROM users u 
WHERE u.status = 'ACTIVE' 
  AND u.create_time >= DATE_SUB(NOW(), INTERVAL 30 DAY)
ORDER BY u.create_time DESC 
LIMIT 20;

-- 检查执行计划
-- 确保使用了索引
-- 确保扫描行数合理
-- [AI-BLOCK-END]
```

### 阶段4：高级特性实施 [Week 7-8]

#### 4.1 Redis缓存规范验证 [SHOULD - L2]
- [ ] **Key命名规范**
  - [ ] 前缀统一使用应用名
  - [ ] 层次结构清晰
  - [ ] 过期时间设置
  - [ ] 避免Key冲突

- [ ] **缓存策略检查**
  - [ ] Cache-Aside模式实现
  - [ ] 缓存穿透防护
  - [ ] 缓存雪崩防护
  - [ ] 缓存击穿防护
  - [ ] 分布式锁使用

#### 4.2 监控和日志规范 [MUST - L1]
```java
// [AI-BLOCK-START] - 生成工具: 检查清单 v1.0
// ✅ 日志规范检查
@Service
@Slf4j  // 使用统一日志框架
public class UserService {
    
    public User createUser(CreateUserRequest request) {
        // 1. 入口日志 - INFO级别
        log.info("Creating user with email: {}", request.getEmail());
        
        try {
            // 2. 关键操作日志 - DEBUG级别
            log.debug("Validating user request: {}", request);
            
            User user = processUserCreation(request);
            
            // 3. 成功日志 - INFO级别
            log.info("User created successfully: userId={}", user.getId());
            
            return user;
            
        } catch (BusinessException e) {
            // 4. 业务异常日志 - WARN级别
            log.warn("Business error creating user: {} - {}", e.getErrorCode(), e.getMessage());
            throw e;
            
        } catch (Exception e) {
            // 5. 系统异常日志 - ERROR级别
            log.error("System error creating user: {}", request.getEmail(), e);
            throw new BusinessException("User creation failed", e);
        }
    }
}

// 验证检查项
// 1. 日志级别使用正确
// 2. 敏感信息已脱敏
// 3. 结构化日志格式
// 4. 异常堆栈完整记录
// 5. 关键业务节点有日志
// [AI-BLOCK-END]
```

## 🔧 自动化验证工具

### 1. Pre-commit Hook配置
```bash
#!/bin/sh
# [AI-BLOCK-START] - 生成工具: 检查清单 v1.0
# Git pre-commit hook
echo "Running code quality checks..."

# CheckStyle检查
echo "Running CheckStyle..."
mvn checkstyle:check
if [ $? -ne 0 ]; then
    echo "CheckStyle violations found. Commit aborted."
    exit 1
fi

# PMD检查
echo "Running PMD..."
mvn pmd:check
if [ $? -ne 0 ]; then
    echo "PMD violations found. Commit aborted."
    exit 1
fi

# 单元测试
echo "Running unit tests..."
mvn test
if [ $? -ne 0 ]; then
    echo "Unit tests failed. Commit aborted."
    exit 1
fi

echo "All checks passed. Committing..."
# [AI-BLOCK-END]
```

### 2. IDEA代码检查配置
```xml
<!-- .idea/inspectionProfiles/Project_Default.xml -->
<profile version="1.0">
  <option name="myName" value="Project Default" />
  <inspection_tool class="JavaDoc" enabled="true" level="WARNING" />
  <inspection_tool class="UnusedDeclaration" enabled="true" level="WARNING" />
  <inspection_tool class="NullableProblems" enabled="true" level="ERROR" />
  <inspection_tool class="ConstantConditions" enabled="true" level="ERROR" />
</profile>
```

### 3. SonarQube质量门禁
```yaml
# sonar-project.properties
sonar.projectKey=myapp-java
sonar.projectName=MyApp Java
sonar.projectVersion=1.0
sonar.sources=src/main/java
sonar.tests=src/test/java
sonar.java.binaries=target/classes
sonar.java.test.binaries=target/test-classes
sonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

# 质量门禁条件
sonar.qualitygate.wait=true
```

## 📊 质量指标监控

### 代码质量仪表板
```yaml
# 关键指标定义
quality_metrics:
  coverage:
    line_coverage: ">= 80%"
    branch_coverage: ">= 70%"
    
  complexity:
    cyclomatic_complexity: "<= 10"
    cognitive_complexity: "<= 15"
    
  maintainability:
    technical_debt_ratio: "<= 5%"
    code_smells: "0 blocker, <= 5 critical"
    
  reliability:
    bugs: "0 blocker, 0 critical"
    
  security:
    vulnerabilities: "0 blocker, 0 critical"
    security_hotspots: "reviewed and resolved"
    
  duplication:
    duplicated_lines_density: "<= 3%"
```

### 每日质量报告模板
```markdown
# 代码质量日报 - {日期}

## 📊 质量指标概览
- 代码覆盖率: {coverage}%
- 技术债务比率: {tech_debt}%
- 代码重复率: {duplication}%
- 新增问题数: {new_issues}

## 🔴 高优先级问题
- [ ] {问题描述} - {负责人} - {预计解决时间}

## 🟡 中优先级问题
- [ ] {问题描述} - {负责人} - {预计解决时间}

## 📈 改进趋势
- 本周新增代码行数: {new_lines}
- 本周修复问题数: {fixed_issues}
- 代码质量评分: {quality_score}/10
```

## ✅ 验收标准

### 阶段性验收检查
- [ ] **第1阶段验收**：开发环境配置完成，工具链正常运行
- [ ] **第2阶段验收**：核心规范实施，代码质量指标达标
- [ ] **第3阶段验收**：框架规范落地，API设计规范
- [ ] **第4阶段验收**：高级特性实施，监控告警完善

### 最终验收标准
- [ ] 代码覆盖率 ≥ 80%
- [ ] SonarQube质量门禁通过
- [ ] 0个阻断性问题
- [ ] 技术债务比率 ≤ 5%
- [ ] CI/CD流水线稳定运行
- [ ] 团队成员规范培训完成

---

*此实施检查清单提供了Java编程规范从环境搭建到最终验收的完整实施路径*
description:
globs:
alwaysApply: false
---
