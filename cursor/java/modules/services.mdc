# 服务层规范 (模块层规则)
> 业务逻辑层的标准化设计和实现规范

## 基础规范

### 服务层设计原则
- **业务聚合**: 每个Service负责一个明确的业务领域
- **事务管理**: Service层负责定义和管理事务边界
- **无状态设计**: Service实例不保存任何业务状态
- **接口导向**: 面向接口编程，分离接口定义和实现
- **依赖隔离**: 不直接依赖外部系统，通过适配器模式隔离

### 职责边界定义
- **业务逻辑**: 处理核心业务规则和流程
- **数据转换**: DTO与Entity之间的转换
- **事务协调**: 协调多个Repository的数据操作
- **异常转换**: 将底层异常转换为业务异常
- **缓存管理**: 管理业务相关的缓存逻辑

### 接口设计规范
- **方法命名**: 使用业务含义明确的方法名
- **参数设计**: 使用业务对象而不是基础类型
- **返回值**: 返回业务对象或Optional包装
- **异常声明**: 明确声明可能抛出的业务异常
- **文档注释**: 详细描述业务规则和约束条件

### 实现类组织
- **包结构**: impl包下组织实现类
- **命名约定**: 接口名+Impl的命名方式
- **依赖注入**: 通过构造器注入所需依赖
- **方法实现**: 专注于业务逻辑实现
- **异常处理**: 适当的异常捕获和转换

## 强制行为

### 注解和配置
- **@Service注解**: 实现类必须使用@Service注解
- **@Transactional**: 根据需要添加事务注解
- **@Validated**: 开启方法级别的参数验证
- **@Cacheable**: 合理使用缓存注解提升性能
- **@Async**: 异步方法使用@Async注解

### 事务管理要求
- **明确事务边界**: 在Service方法级别定义事务
- **只读事务**: 查询方法使用readOnly=true
- **回滚规则**: 明确指定回滚的异常类型
- **传播行为**: 根据业务场景选择合适的传播行为
- **超时设置**: 为长时间运行的事务设置超时

### 依赖管理规范
- **Repository注入**: 注入必需的Repository接口
- **Service协作**: 注入其他Service接口进行协作
- **外部服务**: 通过接口注入外部服务适配器
- **工具类使用**: 注入工具类而不是使用静态方法
- **配置注入**: 注入配置属性进行参数化

### 方法实现标准
- **参数验证**: 验证输入参数的有效性
- **业务规则**: 实现完整的业务验证逻辑
- **数据操作**: 通过Repository进行数据访问
- **异常处理**: 捕获并转换底层异常
- **日志记录**: 记录关键业务操作和异常

## 禁止行为

### 设计反模式禁令
- **禁止贫血模型**: Service不应只是简单的CRUD操作
- **禁止万能Service**: 避免创建包含所有业务的超大Service
- **禁止直接数据库访问**: 不直接使用JDBC或原生SQL
- **禁止状态保存**: Service实例不保存任何状态信息
- **禁止循环依赖**: Service之间不能有循环依赖

### 事务使用禁令
- **禁止细粒度事务**: 不在getter方法上使用事务
- **禁止事务嵌套滥用**: 避免不必要的事务嵌套
- **禁止长事务**: 避免长时间持有数据库连接
- **禁止事务中的外部调用**: 不在事务中调用外部系统
- **禁止忽略异常**: 不忽略可能导致数据不一致的异常

### 性能相关禁令
- **禁止N+1查询**: 避免在循环中调用数据库
- **禁止大批量操作**: 不在单个事务中处理大量数据
- **禁止同步长操作**: 长时间操作使用异步处理
- **禁止缓存滥用**: 不缓存频繁变更的数据
- **禁止忽略分页**: 列表查询必须支持分页

### 安全相关禁令
- **禁止信任用户输入**: 所有外部输入都要验证
- **禁止敏感信息泄露**: 不在日志中记录敏感信息
- **禁止权限检查遗漏**: 关键操作必须进行权限检查
- **禁止SQL注入**: 使用参数化查询防止注入
- **禁止业务规则跳过**: 不能绕过必要的业务验证

## 示例代码

### 标准的Service接口定义
```java
/* [AI-BLOCK-START] - 生成工具: 服务层规范 v2.0 */
/**
 * 用户管理服务接口
 * 
 * 定义用户相关的核心业务操作，包括用户生命周期管理、状态变更、权限控制等功能。
 * 该接口封装了用户域的所有业务规则，确保数据一致性和业务完整性。
 * 
 * <p>主要功能：</p>
 * <ul>
 *   <li>用户注册和激活流程</li>
 *   <li>用户信息查询和更新</li>
 *   <li>用户状态管理</li>
 *   <li>密码和邮箱变更</li>
 *   <li>用户权限分配</li>
 * </ul>
 * 
 * @author 开发团队
 * @version 1.2.0
 * @since 1.0.0
 */
public interface UserService {
    
    /**
     * 创建新用户
     * 
     * 执行完整的用户注册流程，包括数据验证、唯一性检查、密码加密、
     * 初始状态设置和激活邮件发送。
     * 
     * <p>业务规则：</p>
     * <ul>
     *   <li>用户名和邮箱必须在系统中唯一</li>
     *   <li>密码必须符合安全策略要求</li>
     *   <li>新用户初始状态为PENDING，需要邮箱激活</li>
     *   <li>自动分配默认用户角色</li>
     * </ul>
     * 
     * @param request 用户创建请求，包含用户基本信息
     * @return 创建成功的用户对象，不包含敏感信息
     * @throws DuplicateUserException 当用户名或邮箱已存在时
     * @throws InvalidPasswordException 当密码不符合安全策略时
     * @throws EmailSendException 当激活邮件发送失败时
     * @since 1.0.0
     */
    User createUser(CreateUserRequest request);
    
    /**
     * 根据ID查询用户
     * 
     * 查询指定ID的用户信息，只返回未被删除的用户。
     * 该方法支持缓存，频繁查询性能较好。
     * 
     * @param id 用户唯一标识符
     * @return 用户信息的Optional包装，不存在时返回空
     * @throws IllegalArgumentException 当id为null或无效时
     * @since 1.0.0
     */
    Optional<User> findUserById(Long id);
    
    /**
     * 根据用户名查询用户
     * 
     * @param username 用户名，区分大小写
     * @return 用户信息的Optional包装
     * @since 1.0.0
     */
    Optional<User> findUserByUsername(String username);
    
    /**
     * 根据邮箱查询用户
     * 
     * @param email 邮箱地址，不区分大小写
     * @return 用户信息的Optional包装
     * @since 1.0.0
     */
    Optional<User> findUserByEmail(String email);
    
    /**
     * 分页查询用户列表
     * 
     * 根据查询条件分页获取用户列表，支持多维度过滤和排序。
     * 
     * @param pageable 分页参数
     * @param criteria 查询条件，可为null
     * @return 分页的用户列表
     * @since 1.1.0
     */
    PageResponse<User> findUsers(Pageable pageable, UserSearchCriteria criteria);
    
    /**
     * 更新用户基本信息
     * 
     * 更新用户的非敏感信息，如姓名、电话等。用户名、邮箱、密码等
     * 敏感信息需要通过专门的方法进行变更。
     * 
     * <p>权限要求：</p>
     * <ul>
     *   <li>用户只能更新自己的信息</li>
     *   <li>管理员可以更新任何用户的信息</li>
     * </ul>
     * 
     * @param id 用户ID
     * @param request 更新请求
     * @return 更新后的用户对象
     * @throws ResourceNotFoundException 当用户不存在时
     * @throws AccessDeniedException 当没有权限时
     * @since 1.0.0
     */
    User updateUser(Long id, UpdateUserRequest request);
    
    /**
     * 更改用户密码
     * 
     * 验证旧密码后更新为新密码，新密码必须符合安全策略。
     * 
     * @param id 用户ID
     * @param request 密码更改请求
     * @throws InvalidPasswordException 当旧密码错误或新密码不符合要求时
     * @since 1.0.0
     */
    void changePassword(Long id, ChangePasswordRequest request);
    
    /**
     * 更改用户邮箱
     * 
     * 向新邮箱发送验证邮件，用户确认后完成邮箱变更。
     * 
     * @param id 用户ID
     * @param request 邮箱更改请求
     * @throws DuplicateEmailException 当新邮箱已被使用时
     * @since 1.0.0
     */
    void changeEmail(Long id, ChangeEmailRequest request);
    
    /**
     * 更新用户状态
     * 
     * 管理员可以激活、锁定或禁用用户账户。
     * 
     * @param id 用户ID
     * @param status 新的用户状态
     * @return 更新后的用户对象
     * @throws IllegalStateException 当状态转换不合法时
     * @since 1.0.0
     */
    User updateUserStatus(Long id, UserStatus status);
    
    /**
     * 软删除用户
     * 
     * 将用户标记为已删除状态，不物理删除数据。
     * 
     * @param id 用户ID
     * @throws BusinessException 当尝试删除管理员账户时
     * @since 1.0.0
     */
    void deleteUser(Long id);
    
    /**
     * 恢复已删除的用户
     * 
     * @param id 用户ID
     * @since 1.1.0
     */
    void restoreUser(Long id);
    
    /**
     * 激活用户账户
     * 
     * 通过激活令牌激活用户账户。
     * 
     * @param token 激活令牌
     * @throws InvalidTokenException 当令牌无效或已过期时
     * @since 1.0.0
     */
    void activateUser(String token);
    
    /**
     * 重置用户密码
     * 
     * 生成重置令牌并发送重置密码邮件。
     * 
     * @param email 用户邮箱
     * @since 1.0.0
     */
    void requestPasswordReset(String email);
    
    /**
     * 确认密码重置
     * 
     * 通过重置令牌设置新密码。
     * 
     * @param token 重置令牌
     * @param newPassword 新密码
     * @throws InvalidTokenException 当令牌无效或已过期时
     * @since 1.0.0
     */
    void confirmPasswordReset(String token, String newPassword);
    
    /**
     * 批量操作用户
     * 
     * 支持批量创建、更新、删除用户。
     * 
     * @param request 批量操作请求
     * @return 操作结果统计
     * @since 1.2.0
     */
    BatchOperationResult batchOperation(BatchUserRequest request);
    
    /**
     * 上传用户头像
     * 
     * @param id 用户ID
     * @param file 头像文件
     * @return 上传结果
     * @since 1.1.0
     */
    UploadResult uploadAvatar(Long id, MultipartFile file);
}
/* [AI-BLOCK-END] */
```

### 标准的Service实现类
```java
/* [AI-BLOCK-START] - 生成工具: 服务层规范 v2.0 */
/**
 * 用户管理服务实现类
 * 
 * 实现用户相关的所有业务逻辑，确保数据一致性和业务完整性。
 * 负责事务管理、业务规则验证、数据转换和异常处理。
 */
@Service
@Transactional(readOnly = true)
@Validated
@Slf4j
public class UserServiceImpl implements UserService {
    
    // 依赖注入
    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;
    private final EmailService emailService;
    private final FileService fileService;
    private final UserTokenService tokenService;
    private final AuditService auditService;
    private final CacheManager cacheManager;
    
    // 配置属性
    private final UserProperties userProperties;
    
    /**
     * 构造器注入所有依赖
     */
    public UserServiceImpl(UserRepository userRepository,
                          PasswordEncoder passwordEncoder,
                          EmailService emailService,
                          FileService fileService,
                          UserTokenService tokenService,
                          AuditService auditService,
                          CacheManager cacheManager,
                          UserProperties userProperties) {
        this.userRepository = userRepository;
        this.passwordEncoder = passwordEncoder;
        this.emailService = emailService;
        this.fileService = fileService;
        this.tokenService = tokenService;
        this.auditService = auditService;
        this.cacheManager = cacheManager;
        this.userProperties = userProperties;
    }
    
    @Override
    @Transactional(rollbackFor = Exception.class)
    public User createUser(CreateUserRequest request) {
        log.info("开始创建用户: username={}, email={}", request.getUsername(), request.getEmail());
        
        // 参数验证
        validateCreateUserRequest(request);
        
        // 业务规则验证
        validateUserUniqueness(request.getUsername(), request.getEmail());
        validatePasswordPolicy(request.getPassword());
        
        try {
            // 创建用户实体
            User user = buildUserFromRequest(request);
            
            // 保存用户
            User savedUser = userRepository.save(user);
            log.info("用户创建成功: id={}, username={}", savedUser.getId(), savedUser.getUsername());
            
            // 异步发送激活邮件
            sendActivationEmailAsync(savedUser);
            
            // 记录审计日志
            auditService.logUserCreation(savedUser);
            
            return savedUser;
            
        } catch (DataAccessException e) {
            log.error("用户创建失败，数据库操作异常: username={}", request.getUsername(), e);
            throw new BusinessException("用户创建失败，请稍后重试", e);
        } catch (Exception e) {
            log.error("用户创建失败，未知异常: username={}", request.getUsername(), e);
            throw new BusinessException("系统错误，请联系管理员", e);
        }
    }
    
    @Override
    @Cacheable(value = "users", key = "#id")
    public Optional<User> findUserById(Long id) {
        if (id == null || id <= 0) {
            throw new IllegalArgumentException("用户ID不能为空或小于等于0");
        }
        
        return userRepository.findByIdAndDeletedFalse(id);
    }
    
    @Override
    @Cacheable(value = "users", key = "'username:' + #username")
    public Optional<User> findUserByUsername(String username) {
        if (StringUtils.isBlank(username)) {
            throw new IllegalArgumentException("用户名不能为空");
        }
        
        return userRepository.findByUsernameAndDeletedFalse(username);
    }
    
    @Override
    @Cacheable(value = "users", key = "'email:' + #email.toLowerCase()")
    public Optional<User> findUserByEmail(String email) {
        if (StringUtils.isBlank(email)) {
            throw new IllegalArgumentException("邮箱不能为空");
        }
        
        return userRepository.findByEmailIgnoreCaseAndDeletedFalse(email);
    }
    
    @Override
    public PageResponse<User> findUsers(Pageable pageable, UserSearchCriteria criteria) {
        // 参数验证
        if (pageable == null) {
            pageable = PageRequest.of(0, 20);
        }
        
        // 分页大小限制
        if (pageable.getPageSize() > 100) {
            pageable = PageRequest.of(pageable.getPageNumber(), 100, pageable.getSort());
        }
        
        try {
            Page<User> userPage = userRepository.findByCriteria(criteria, pageable);
            return PageResponse.from(userPage);
            
        } catch (DataAccessException e) {
            log.error("查询用户列表失败", e);
            throw new BusinessException("查询用户列表失败，请稍后重试", e);
        }
    }
    
    @Override
    @Transactional(rollbackFor = Exception.class)
    @CacheEvict(value = "users", key = "#id")
    public User updateUser(Long id, UpdateUserRequest request) {
        log.info("开始更新用户: id={}", id);
        
        // 查找用户
        User user = findUserById(id)
            .orElseThrow(() -> new ResourceNotFoundException("用户不存在: " + id));
        
        // 权限检查
        checkUpdatePermission(user);
        
        // 参数验证
        validateUpdateUserRequest(request);
        
        try {
            // 更新用户信息
            updateUserFields(user, request);
            
            // 保存更新
            User updatedUser = userRepository.save(user);
            log.info("用户更新成功: id={}", updatedUser.getId());
            
            // 记录审计日志
            auditService.logUserUpdate(updatedUser);
            
            return updatedUser;
            
        } catch (DataAccessException e) {
            log.error("用户更新失败，数据库操作异常: id={}", id, e);
            throw new BusinessException("用户更新失败，请稍后重试", e);
        }
    }
    
    @Override
    @Transactional(rollbackFor = Exception.class)
    @CacheEvict(value = "users", key = "#id")
    public void changePassword(Long id, ChangePasswordRequest request) {
        log.info("开始更改密码: id={}", id);
        
        // 查找用户
        User user = findUserById(id)
            .orElseThrow(() -> new ResourceNotFoundException("用户不存在: " + id));
        
        // 验证旧密码
        if (!passwordEncoder.matches(request.getOldPassword(), user.getPasswordHash())) {
            throw new InvalidPasswordException("旧密码错误");
        }
        
        // 验证新密码策略
        validatePasswordPolicy(request.getNewPassword());
        
        // 检查新密码是否与旧密码相同
        if (passwordEncoder.matches(request.getNewPassword(), user.getPasswordHash())) {
            throw new InvalidPasswordException("新密码不能与旧密码相同");
        }
        
        try {
            // 更新密码
            user.setPasswordHash(passwordEncoder.encode(request.getNewPassword()));
            user.setPasswordChangeTime(LocalDateTime.now());
            
            userRepository.save(user);
            log.info("密码更改成功: id={}", id);
            
            // 记录审计日志
            auditService.logPasswordChange(user);
            
            // 发送密码更改通知邮件
            emailService.sendPasswordChangeNotificationAsync(user.getEmail());
            
        } catch (DataAccessException e) {
            log.error("密码更改失败，数据库操作异常: id={}", id, e);
            throw new BusinessException("密码更改失败，请稍后重试", e);
        }
    }
    
    @Override
    @Transactional(rollbackFor = Exception.class)
    @CacheEvict(value = "users", key = "#id")
    public void changeEmail(Long id, ChangeEmailRequest request) {
        log.info("开始更改邮箱: id={}, newEmail={}", id, request.getNewEmail());
        
        // 查找用户
        User user = findUserById(id)
            .orElseThrow(() -> new ResourceNotFoundException("用户不存在: " + id));
        
        // 验证新邮箱唯一性
        if (userRepository.existsByEmailIgnoreCaseAndDeletedFalse(request.getNewEmail())) {
            throw new DuplicateEmailException("邮箱已被使用: " + request.getNewEmail());
        }
        
        try {
            // 生成邮箱变更令牌
            String token = tokenService.generateEmailChangeToken(user, request.getNewEmail());
            
            // 发送邮箱验证邮件
            emailService.sendEmailChangeVerificationAsync(request.getNewEmail(), token);
            
            log.info("邮箱更改验证邮件已发送: id={}, newEmail={}", id, request.getNewEmail());
            
        } catch (Exception e) {
            log.error("邮箱更改失败: id={}", id, e);
            throw new BusinessException("邮箱更改失败，请稍后重试", e);
        }
    }
    
    @Override
    @Transactional(rollbackFor = Exception.class)
    @CacheEvict(value = "users", key = "#id")
    public User updateUserStatus(Long id, UserStatus status) {
        log.info("开始更新用户状态: id={}, status={}", id, status);
        
        // 查找用户
        User user = findUserById(id)
            .orElseThrow(() -> new ResourceNotFoundException("用户不存在: " + id));
        
        // 验证状态转换
        validateStatusTransition(user.getStatus(), status);
        
        try {
            // 更新状态
            UserStatus oldStatus = user.getStatus();
            user.setStatus(status);
            user.setStatusChangeTime(LocalDateTime.now());
            
            User updatedUser = userRepository.save(user);
            log.info("用户状态更新成功: id={}, oldStatus={}, newStatus={}", 
                id, oldStatus, status);
            
            // 记录审计日志
            auditService.logUserStatusChange(updatedUser, oldStatus, status);
            
            // 处理状态变更的副作用
            handleStatusChangeEffects(updatedUser, oldStatus, status);
            
            return updatedUser;
            
        } catch (DataAccessException e) {
            log.error("用户状态更新失败，数据库操作异常: id={}", id, e);
            throw new BusinessException("用户状态更新失败，请稍后重试", e);
        }
    }
    
    @Override
    @Transactional(rollbackFor = Exception.class)
    @CacheEvict(value = "users", key = "#id")
    public void deleteUser(Long id) {
        log.info("开始删除用户: id={}", id);
        
        // 查找用户
        User user = findUserById(id)
            .orElseThrow(() -> new ResourceNotFoundException("用户不存在: " + id));
        
        // 检查是否为系统管理员
        if (user.isSystemAdmin()) {
            throw new BusinessException("不能删除系统管理员账户");
        }
        
        try {
            // 软删除
            user.setDeleted(true);
            user.setDeleteTime(LocalDateTime.now());
            
            userRepository.save(user);
            log.info("用户删除成功: id={}", id);
            
            // 记录审计日志
            auditService.logUserDeletion(user);
            
            // 清理相关数据
            cleanupUserRelatedData(user);
            
        } catch (DataAccessException e) {
            log.error("用户删除失败，数据库操作异常: id={}", id, e);
            throw new BusinessException("用户删除失败，请稍后重试", e);
        }
    }
    
    @Override
    @Transactional(rollbackFor = Exception.class)
    public void activateUser(String token) {
        log.info("开始激活用户: token={}", StringUtils.abbreviate(token, 10));
        
        try {
            // 验证激活令牌
            Long userId = tokenService.validateActivationToken(token);
            
            // 查找用户
            User user = userRepository.findById(userId)
                .orElseThrow(() -> new ResourceNotFoundException("用户不存在"));
            
            // 检查用户状态
            if (user.getStatus() != UserStatus.PENDING) {
                throw new IllegalStateException("用户状态不正确，无法激活");
            }
            
            // 激活用户
            user.setStatus(UserStatus.ACTIVE);
            user.setActivationTime(LocalDateTime.now());
            
            userRepository.save(user);
            log.info("用户激活成功: id={}", userId);
            
            // 清除缓存
            evictUserCache(user);
            
            // 记录审计日志
            auditService.logUserActivation(user);
            
            // 发送欢迎邮件
            emailService.sendWelcomeEmailAsync(user.getEmail());
            
        } catch (InvalidTokenException e) {
            log.warn("用户激活失败，令牌无效: token={}", StringUtils.abbreviate(token, 10));
            throw e;
        } catch (Exception e) {
            log.error("用户激活失败: token={}", StringUtils.abbreviate(token, 10), e);
            throw new BusinessException("用户激活失败，请稍后重试", e);
        }
    }
    
    @Override
    @Transactional(rollbackFor = Exception.class)
    public UploadResult uploadAvatar(Long id, MultipartFile file) {
        log.info("开始上传用户头像: id={}, filename={}", id, file.getOriginalFilename());
        
        // 查找用户
        User user = findUserById(id)
            .orElseThrow(() -> new ResourceNotFoundException("用户不存在: " + id));
        
        try {
            // 上传文件
            UploadResult result = fileService.uploadFile(file, "avatars");
            
            // 更新用户头像URL
            String oldAvatarUrl = user.getAvatarUrl();
            user.setAvatarUrl(result.getAccessUrl());
            
            userRepository.save(user);
            log.info("用户头像上传成功: id={}, url={}", id, result.getAccessUrl());
            
            // 清除缓存
            evictUserCache(user);
            
            // 删除旧头像文件
            if (StringUtils.hasText(oldAvatarUrl)) {
                fileService.deleteFileAsync(oldAvatarUrl);
            }
            
            return result;
            
        } catch (Exception e) {
            log.error("用户头像上传失败: id={}", id, e);
            throw new BusinessException("头像上传失败，请稍后重试", e);
        }
    }
    
    /**
     * 验证用户创建请求
     */
    private void validateCreateUserRequest(CreateUserRequest request) {
        if (request == null) {
            throw new IllegalArgumentException("用户创建请求不能为空");
        }
        
        if (StringUtils.isBlank(request.getUsername())) {
            throw new IllegalArgumentException("用户名不能为空");
        }
        
        if (StringUtils.isBlank(request.getEmail())) {
            throw new IllegalArgumentException("邮箱不能为空");
        }
        
        if (StringUtils.isBlank(request.getPassword())) {
            throw new IllegalArgumentException("密码不能为空");
        }
    }
    
    /**
     * 验证用户唯一性
     */
    private void validateUserUniqueness(String username, String email) {
        if (userRepository.existsByUsernameAndDeletedFalse(username)) {
            throw new DuplicateUserException("用户名已存在: " + username);
        }
        
        if (userRepository.existsByEmailIgnoreCaseAndDeletedFalse(email)) {
            throw new DuplicateUserException("邮箱已存在: " + email);
        }
    }
    
    /**
     * 验证密码策略
     */
    private void validatePasswordPolicy(String password) {
        if (password.length() < userProperties.getPasswordMinLength()) {
            throw new InvalidPasswordException("密码长度不能少于" + userProperties.getPasswordMinLength() + "位");
        }
        
        if (password.length() > userProperties.getPasswordMaxLength()) {
            throw new InvalidPasswordException("密码长度不能超过" + userProperties.getPasswordMaxLength() + "位");
        }
        
        // 密码复杂度检查
        if (!password.matches("^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]+$")) {
            throw new InvalidPasswordException("密码必须包含大小写字母、数字和特殊字符");
        }
    }
    
    /**
     * 从请求构建用户实体
     */
    private User buildUserFromRequest(CreateUserRequest request) {
        User user = new User();
        user.setUsername(request.getUsername());
        user.setEmail(request.getEmail().toLowerCase());
        user.setPasswordHash(passwordEncoder.encode(request.getPassword()));
        user.setName(request.getName());
        user.setPhone(request.getPhone());
        user.setStatus(UserStatus.PENDING);
        user.setDeleted(false);
        
        return user;
    }
    
    /**
     * 异步发送激活邮件
     */
    @Async
    protected void sendActivationEmailAsync(User user) {
        try {
            String token = tokenService.generateActivationToken(user);
            emailService.sendActivationEmail(user.getEmail(), token);
            log.info("激活邮件发送成功: email={}", user.getEmail());
        } catch (Exception e) {
            log.error("激活邮件发送失败: email={}", user.getEmail(), e);
            // 不抛出异常，避免影响主业务流程
        }
    }
    
    /**
     * 检查更新权限
     */
    private void checkUpdatePermission(User user) {
        // 权限检查逻辑
        // 用户只能更新自己的信息，管理员可以更新任何用户
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        if (authentication != null && authentication.isAuthenticated()) {
            String currentUsername = authentication.getName();
            boolean isAdmin = authentication.getAuthorities().stream()
                .anyMatch(authority -> authority.getAuthority().equals("ROLE_ADMIN"));
            
            if (!isAdmin && !user.getUsername().equals(currentUsername)) {
                throw new AccessDeniedException("没有权限更新该用户信息");
            }
        }
    }
    
    /**
     * 更新用户字段
     */
    private void updateUserFields(User user, UpdateUserRequest request) {
        if (StringUtils.hasText(request.getName())) {
            user.setName(request.getName());
        }
        
        if (StringUtils.hasText(request.getPhone())) {
            user.setPhone(request.getPhone());
        }
        
        // 更新修改时间
        user.setUpdateTime(LocalDateTime.now());
    }
    
    /**
     * 验证状态转换是否合法
     */
    private void validateStatusTransition(UserStatus from, UserStatus to) {
        // 定义合法的状态转换
        Map<UserStatus, Set<UserStatus>> allowedTransitions = Map.of(
            UserStatus.PENDING, Set.of(UserStatus.ACTIVE, UserStatus.LOCKED),
            UserStatus.ACTIVE, Set.of(UserStatus.LOCKED, UserStatus.DISABLED),
            UserStatus.LOCKED, Set.of(UserStatus.ACTIVE),
            UserStatus.DISABLED, Set.of(UserStatus.ACTIVE)
        );
        
        Set<UserStatus> allowed = allowedTransitions.get(from);
        if (allowed == null || !allowed.contains(to)) {
            throw new IllegalStateException(
                String.format("不允许的状态转换: %s -> %s", from, to));
        }
    }
    
    /**
     * 处理状态变更的副作用
     */
    private void handleStatusChangeEffects(User user, UserStatus oldStatus, UserStatus newStatus) {
        // 如果用户被锁定，清除所有会话
        if (newStatus == UserStatus.LOCKED || newStatus == UserStatus.DISABLED) {
            // TODO: 清除用户会话
        }
        
        // 发送状态变更通知邮件
        emailService.sendStatusChangeNotificationAsync(user.getEmail(), oldStatus, newStatus);
    }
    
    /**
     * 清理用户相关数据
     */
    private void cleanupUserRelatedData(User user) {
        // 清除缓存
        evictUserCache(user);
        
        // 清理会话
        // TODO: 清除用户会话
        
        // 清理临时文件
        if (StringUtils.hasText(user.getAvatarUrl())) {
            fileService.deleteFileAsync(user.getAvatarUrl());
        }
    }
    
    /**
     * 清除用户缓存
     */
    private void evictUserCache(User user) {
        Cache userCache = cacheManager.getCache("users");
        if (userCache != null) {
            userCache.evict(user.getId());
            userCache.evict("username:" + user.getUsername());
            userCache.evict("email:" + user.getEmail().toLowerCase());
        }
    }
}
/* [AI-BLOCK-END] */
```

---

*此服务层规范确保业务逻辑的正确实现、事务的合理管理和系统的健壮性*
description:
globs:
alwaysApply: false
---
