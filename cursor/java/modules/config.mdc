# 配置类规范 (模块层规则)
> Spring配置、数据库连接池、缓存和安全配置的标准化规范

## 基础规范

### 配置类设计原则
- **@Configuration注解**：标识Spring配置类
- **@ConditionalOn注解**：基于条件的配置激活
- **@ConfigurationProperties**：类型安全的配置属性绑定
- **@EnableAutoConfiguration**：启用自动配置功能
- **配置分离**：按功能模块分离配置类

### 配置优先级管理
- **Profile环境隔离**：dev、test、prod环境配置分离
- **外部化配置**：使用application.yml管理配置
- **环境变量覆盖**：敏感配置使用环境变量
- **配置验证**：启动时验证必要配置项
- **默认值设置**：为配置项提供合理的默认值

### 数据源配置标准
- **连接池配置**：HikariCP连接池参数优化
- **事务管理**：事务管理器配置
- **JPA配置**：Hibernate属性和策略配置
- **多数据源**：读写分离数据源配置
- **数据库迁移**：Flyway或Liquibase集成

### 缓存配置策略
- **Redis配置**：连接池和序列化配置
- **缓存管理器**：多级缓存配置
- **缓存策略**：TTL和淘汰策略
- **缓存监控**：缓存性能监控配置
- **缓存预热**：应用启动时的缓存预热

## 强制行为

### 配置类结构要求
- **类级别注解**：正确使用@Configuration和相关注解
- **Bean定义**：使用@Bean注解定义Spring Bean
- **条件配置**：使用@ConditionalOnProperty等条件注解
- **配置属性**：使用@Value或@ConfigurationProperties注入配置

### 数据库配置要求
- **连接池参数**：配置合适的连接池大小和超时参数
- **事务配置**：配置事务管理器和传播行为
- **JPA属性**：配置Hibernate的DDL、缓存、批量等属性
- **数据源监控**：集成数据源监控和健康检查

### 安全配置要求
- **安全框架**：Spring Security配置
- **认证配置**：JWT、OAuth2等认证方式配置
- **授权配置**：基于角色和权限的访问控制
- **CORS配置**：跨域请求配置
- **CSRF保护**：CSRF攻击防护配置

### 异步配置要求
- **线程池配置**：自定义线程池配置
- **异步注解**：@EnableAsync启用异步支持
- **异常处理**：异步方法的异常处理配置
- **任务调度**：@EnableScheduling启用定时任务

## 禁止行为

### 配置设计禁令
- **禁止在配置类中编写业务逻辑**：配置类只负责Bean的创建和配置
- **禁止硬编码配置值**：配置值必须外部化
- **禁止循环依赖**：配置类之间不能有循环依赖
- **禁止在配置类中使用@Service等注解**：保持配置类的纯粹性
- **禁止忽略配置验证**：重要配置必须验证有效性

### 性能相关禁令
- **禁止不合理的连接池配置**：避免连接数过多或过少
- **禁止忽略缓存配置**：热点数据必须配置适当的缓存
- **禁止同步阻塞配置**：耗时操作使用异步配置
- **禁止忽略监控配置**：生产环境必须配置监控
- **禁止资源泄漏**：确保连接、线程等资源正确释放

### 安全配置禁令
- **禁止使用默认安全配置**：必须自定义安全配置
- **禁止在配置中暴露敏感信息**：密码、密钥等使用环境变量
- **禁止不安全的CORS配置**：避免允许所有来源的跨域请求
- **禁止忽略HTTPS配置**：生产环境强制使用HTTPS
- **禁止弱加密配置**：使用强加密算法和密钥

### 环境配置禁令
- **禁止混用环境配置**：开发、测试、生产环境配置严格分离
- **禁止在代码中硬编码环境标识**：使用Spring Profile管理环境
- **禁止忽略配置文档**：重要配置必须有详细说明
- **禁止配置冗余**：避免重复和无用的配置
- **禁止忽略配置安全**：配置文件的权限和访问控制

## 示例代码

### 数据库配置类
```java
/* [AI-BLOCK-START] - 生成工具: 配置规范 v2.0 */
@Configuration
@EnableJpaRepositories(
    basePackages = "com.company.project.repository",
    entityManagerFactoryRef = "entityManagerFactory",
    transactionManagerRef = "transactionManager"
)
@EnableTransactionManagement
@EnableJpaAuditing(auditorAwareRef = "auditorProvider")
@Slf4j
public class DatabaseConfig {
    
    @Value("${spring.datasource.url}")
    private String databaseUrl;
    
    @Value("${spring.datasource.username}")
    private String databaseUsername;
    
    @Value("${spring.datasource.password}")
    private String databasePassword;
    
    /**
     * 主数据源配置（HikariCP）
     */
    @Bean
    @Primary
    @ConfigurationProperties(prefix = "spring.datasource.hikari")
    public DataSource dataSource() {
        HikariConfig config = new HikariConfig();
        
        // 基础连接配置
        config.setJdbcUrl(databaseUrl);
        config.setUsername(databaseUsername);
        config.setPassword(databasePassword);
        config.setDriverClassName("com.mysql.cj.jdbc.Driver");
        
        // 连接池配置
        config.setMaximumPoolSize(20);                    // 最大连接数
        config.setMinimumIdle(5);                         // 最小空闲连接数
        config.setConnectionTimeout(30000);               // 连接超时时间(30s)
        config.setIdleTimeout(600000);                    // 空闲超时时间(10min)
        config.setMaxLifetime(1800000);                   // 连接最大生命周期(30min)
        config.setLeakDetectionThreshold(60000);          // 连接泄漏检测阈值(1min)
        
        // 性能优化配置
        config.setConnectionInitSql("SELECT 1");
        config.setValidationTimeout(5000);
        config.setConnectionTestQuery("SELECT 1");
        
        // 连接池名称
        config.setPoolName("HikariCP-Primary");
        
        // 数据库特定配置
        config.addDataSourceProperty("cachePrepStmts", "true");
        config.addDataSourceProperty("prepStmtCacheSize", "250");
        config.addDataSourceProperty("prepStmtCacheSqlLimit", "2048");
        config.addDataSourceProperty("useServerPrepStmts", "true");
        config.addDataSourceProperty("useLocalSessionState", "true");
        config.addDataSourceProperty("rewriteBatchedStatements", "true");
        config.addDataSourceProperty("cacheResultSetMetadata", "true");
        config.addDataSourceProperty("cacheServerConfiguration", "true");
        config.addDataSourceProperty("elideSetAutoCommits", "true");
        config.addDataSourceProperty("maintainTimeStats", "false");
        
        HikariDataSource dataSource = new HikariDataSource(config);
        
        log.info("Primary DataSource configured: {}", databaseUrl);
        
        return dataSource;
    }
    
    /**
     * 只读数据源配置（读写分离）
     */
    @Bean
    @ConditionalOnProperty(name = "app.database.read-only.enabled", havingValue = "true")
    @ConfigurationProperties(prefix = "app.database.read-only")
    public DataSource readOnlyDataSource() {
        log.info("Read-only DataSource configured");
        return DataSourceBuilder.create().build();
    }
    
    /**
     * JPA Entity Manager Factory配置
     */
    @Bean
    @Primary
    public LocalContainerEntityManagerFactoryBean entityManagerFactory(
            DataSource dataSource) {
        
        LocalContainerEntityManagerFactoryBean em = new LocalContainerEntityManagerFactoryBean();
        em.setDataSource(dataSource);
        em.setPackagesToScan("com.company.project.entity");
        
        // Hibernate配置
        HibernateJpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter();
        vendorAdapter.setGenerateDdl(false);
        vendorAdapter.setShowSql(false);
        vendorAdapter.setDatabasePlatform("org.hibernate.dialect.MySQL8Dialect");
        em.setJpaVendorAdapter(vendorAdapter);
        
        // JPA属性配置
        Properties properties = new Properties();
        
        // DDL配置
        properties.setProperty("hibernate.hbm2ddl.auto", "validate");
        properties.setProperty("hibernate.naming.physical-strategy", 
            "org.hibernate.boot.model.naming.SnakeCasePhysicalNamingStrategy");
        
        // 性能优化配置
        properties.setProperty("hibernate.jdbc.batch_size", "50");
        properties.setProperty("hibernate.order_inserts", "true");
        properties.setProperty("hibernate.order_updates", "true");
        properties.setProperty("hibernate.jdbc.batch_versioned_data", "true");
        
        // 连接配置
        properties.setProperty("hibernate.connection.provider_disables_autocommit", "true");
        properties.setProperty("hibernate.query.in_clause_parameter_padding", "true");
        
        // 缓存配置
        properties.setProperty("hibernate.cache.use_second_level_cache", "true");
        properties.setProperty("hibernate.cache.use_query_cache", "true");
        properties.setProperty("hibernate.cache.region.factory_class", 
            "org.hibernate.cache.jcache.JCacheRegionFactory");
        
        // 统计配置
        properties.setProperty("hibernate.generate_statistics", "true");
        properties.setProperty("hibernate.session.events.log.LOG_QUERIES_SLOWER_THAN_MS", "100");
        
        em.setJpaProperties(properties);
        
        log.info("EntityManagerFactory configured with Hibernate properties");
        
        return em;
    }
    
    /**
     * 事务管理器配置
     */
    @Bean
    @Primary
    public PlatformTransactionManager transactionManager(EntityManagerFactory entityManagerFactory) {
        JpaTransactionManager transactionManager = new JpaTransactionManager();
        transactionManager.setEntityManagerFactory(entityManagerFactory);
        
        // 事务超时配置
        transactionManager.setDefaultTimeout(30);
        transactionManager.setGlobalRollbackOnParticipationFailure(false);
        
        log.info("JPA TransactionManager configured");
        
        return transactionManager;
    }
    
    /**
     * 审计提供者配置
     */
    @Bean
    public AuditorAware<String> auditorProvider() {
        return () -> {
            // 获取当前用户信息
            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            if (authentication != null && authentication.isAuthenticated() 
                && !"anonymousUser".equals(authentication.getPrincipal())) {
                return Optional.of(authentication.getName());
            }
            return Optional.of("system");
        };
    }
    
    /**
     * 数据库健康检查
     */
    @Bean
    public HealthIndicator databaseHealthIndicator(DataSource dataSource) {
        return new DataSourceHealthIndicator(dataSource, "SELECT 1");
    }
}
/* [AI-BLOCK-END] */
```

### Redis缓存配置类
```java
/* [AI-BLOCK-START] - 生成工具: 配置规范 v2.0 */
@Configuration
@EnableCaching
@ConditionalOnProperty(name = "spring.redis.enabled", havingValue = "true", matchIfMissing = true)
@Slf4j
public class RedisConfig {
    
    @Value("${spring.redis.host:localhost}")
    private String host;
    
    @Value("${spring.redis.port:6379}")
    private int port;
    
    @Value("${spring.redis.password:}")
    private String password;
    
    @Value("${spring.redis.database:0}")
    private int database;
    
    @Value("${spring.redis.timeout:5000}")
    private int timeout;
    
    /**
     * Redis连接工厂配置
     */
    @Bean
    public LettuceConnectionFactory redisConnectionFactory() {
        // Redis单机配置
        RedisStandaloneConfiguration redisConfig = new RedisStandaloneConfiguration();
        redisConfig.setHostName(host);
        redisConfig.setPort(port);
        redisConfig.setDatabase(database);
        if (StringUtils.hasText(password)) {
            redisConfig.setPassword(password);
        }
        
        // Lettuce连接池配置
        GenericObjectPoolConfig<StatefulRedisConnection<String, String>> poolConfig = 
            new GenericObjectPoolConfig<>();
        poolConfig.setMaxTotal(200);           // 最大连接数
        poolConfig.setMaxIdle(20);             // 最大空闲连接数
        poolConfig.setMinIdle(5);              // 最小空闲连接数
        poolConfig.setMaxWaitMillis(3000);     // 最大等待时间
        poolConfig.setTestOnBorrow(true);      // 借用时验证
        poolConfig.setTestOnReturn(true);      // 归还时验证
        poolConfig.setTestWhileIdle(true);     // 空闲时验证
        
        LettucePoolingClientConfiguration.Builder clientBuilder = 
            LettucePoolingClientConfiguration.builder()
                .poolConfig(poolConfig)
                .commandTimeout(Duration.ofMillis(timeout));
        
        LettuceConnectionFactory factory = new LettuceConnectionFactory(
            redisConfig, clientBuilder.build());
        
        log.info("Redis connection factory configured: {}:{}", host, port);
        
        return factory;
    }
    
    /**
     * RedisTemplate配置
     */
    @Bean
    @Primary
    public RedisTemplate<String, Object> redisTemplate(LettuceConnectionFactory connectionFactory) {
        RedisTemplate<String, Object> template = new RedisTemplate<>();
        template.setConnectionFactory(connectionFactory);
        
        // JSON序列化配置
        Jackson2JsonRedisSerializer<Object> jsonSerializer = new Jackson2JsonRedisSerializer<>(Object.class);
        ObjectMapper objectMapper = new ObjectMapper();
        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);
        objectMapper.activateDefaultTyping(LaissezFaireSubTypeValidator.instance, 
            ObjectMapper.DefaultTyping.NON_FINAL);
        objectMapper.registerModule(new JavaTimeModule());
        objectMapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
        jsonSerializer.setObjectMapper(objectMapper);
        
        // String序列化配置
        StringRedisSerializer stringSerializer = new StringRedisSerializer();
        
        // 设置序列化器
        template.setKeySerializer(stringSerializer);           // Key序列化
        template.setHashKeySerializer(stringSerializer);       // Hash Key序列化
        template.setValueSerializer(jsonSerializer);           // Value序列化
        template.setHashValueSerializer(jsonSerializer);       // Hash Value序列化
        
        template.setDefaultSerializer(jsonSerializer);
        template.afterPropertiesSet();
        
        log.info("RedisTemplate configured with JSON serialization");
        
        return template;
    }
    
    /**
     * 字符串RedisTemplate配置
     */
    @Bean
    public StringRedisTemplate stringRedisTemplate(LettuceConnectionFactory connectionFactory) {
        StringRedisTemplate template = new StringRedisTemplate();
        template.setConnectionFactory(connectionFactory);
        
        log.info("StringRedisTemplate configured");
        
        return template;
    }
    
    /**
     * 缓存管理器配置
     */
    @Bean
    @Primary
    public CacheManager cacheManager(RedisConnectionFactory connectionFactory) {
        RedisCacheConfiguration defaultConfig = RedisCacheConfiguration.defaultCacheConfig()
            // 缓存过期时间
            .entryTtl(Duration.ofHours(1))
            // Key序列化
            .serializeKeysWith(RedisSerializationContext.SerializationPair
                .fromSerializer(new StringRedisSerializer()))
            // Value序列化
            .serializeValuesWith(RedisSerializationContext.SerializationPair
                .fromSerializer(new Jackson2JsonRedisSerializer<>(Object.class)))
            // 禁用缓存空值
            .disableCachingNullValues()
            // 缓存Key前缀
            .prefixCacheNameWith("cache:");
        
        // 不同缓存的个性化配置
        Map<String, RedisCacheConfiguration> cacheConfigurations = new HashMap<>();
        
        // 用户缓存 - 1小时过期
        cacheConfigurations.put("users", defaultConfig.entryTtl(Duration.ofHours(1)));
        
        // 系统配置缓存 - 24小时过期
        cacheConfigurations.put("configs", defaultConfig.entryTtl(Duration.ofHours(24)));
        
        // 短期缓存 - 15分钟过期
        cacheConfigurations.put("temp", defaultConfig.entryTtl(Duration.ofMinutes(15)));
        
        // 权限缓存 - 30分钟过期
        cacheConfigurations.put("permissions", defaultConfig.entryTtl(Duration.ofMinutes(30)));
        
        RedisCacheManager cacheManager = RedisCacheManager.builder(connectionFactory)
            .cacheDefaults(defaultConfig)
            .withInitialCacheConfigurations(cacheConfigurations)
            .transactionAware()
            .build();
        
        log.info("RedisCacheManager configured with {} custom cache configurations", 
            cacheConfigurations.size());
        
        return cacheManager;
    }
    
    /**
     * Redis健康检查
     */
    @Bean
    public HealthIndicator redisHealthIndicator(RedisConnectionFactory connectionFactory) {
        return new RedisHealthIndicator(connectionFactory);
    }
    
    /**
     * Redis操作工具类
     */
    @Bean
    public RedisUtils redisUtils(RedisTemplate<String, Object> redisTemplate) {
        return new RedisUtils(redisTemplate);
    }
}
/* [AI-BLOCK-END] */
```

### 安全配置类
```java
/* [AI-BLOCK-START] - 生成工具: 配置规范 v2.0 */
@Configuration
@EnableWebSecurity
@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)
@Slf4j
public class SecurityConfig {
    
    private final UserDetailsService userDetailsService;
    private final JwtAuthenticationEntryPoint jwtAuthenticationEntryPoint;
    private final JwtRequestFilter jwtRequestFilter;
    
    public SecurityConfig(UserDetailsService userDetailsService,
                         JwtAuthenticationEntryPoint jwtAuthenticationEntryPoint,
                         JwtRequestFilter jwtRequestFilter) {
        this.userDetailsService = userDetailsService;
        this.jwtAuthenticationEntryPoint = jwtAuthenticationEntryPoint;
        this.jwtRequestFilter = jwtRequestFilter;
    }
    
    /**
     * 密码编码器配置
     */
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder(12);
    }
    
    /**
     * 认证管理器配置
     */
    @Bean
    public AuthenticationManager authenticationManager(
            AuthenticationConfiguration authenticationConfiguration) throws Exception {
        return authenticationConfiguration.getAuthenticationManager();
    }
    
    /**
     * DaoAuthenticationProvider配置
     */
    @Bean
    public DaoAuthenticationProvider authenticationProvider() {
        DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();
        authProvider.setUserDetailsService(userDetailsService);
        authProvider.setPasswordEncoder(passwordEncoder());
        authProvider.setHideUserNotFoundExceptions(false);
        return authProvider;
    }
    
    /**
     * 安全过滤器链配置
     */
    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
            // CSRF配置
            .csrf(csrf -> csrf
                .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse())
                .ignoringRequestMatchers("/api/auth/**", "/api/public/**")
            )
            
            // CORS配置
            .cors(cors -> cors.configurationSource(corsConfigurationSource()))
            
            // 会话管理配置
            .sessionManagement(session -> session
                .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
                .maximumSessions(1)
                .maxSessionsPreventsLogin(false)
            )
            
            // 异常处理配置
            .exceptionHandling(exception -> exception
                .authenticationEntryPoint(jwtAuthenticationEntryPoint)
                .accessDeniedHandler(accessDeniedHandler())
            )
            
            // 请求授权配置
            .authorizeHttpRequests(authz -> authz
                // 公开接口
                .requestMatchers("/api/public/**", "/api/auth/**").permitAll()
                .requestMatchers("/actuator/health", "/actuator/info").permitAll()
                .requestMatchers("/swagger-ui/**", "/v3/api-docs/**").permitAll()
                .requestMatchers("/error").permitAll()
                
                // 静态资源
                .requestMatchers("/static/**", "/favicon.ico").permitAll()
                
                // 管理接口
                .requestMatchers("/api/admin/**").hasRole("ADMIN")
                .requestMatchers(HttpMethod.DELETE, "/api/**").hasAnyRole("ADMIN", "MANAGER")
                
                // 用户接口
                .requestMatchers("/api/users/**").hasAnyRole("USER", "ADMIN", "MANAGER")
                
                // 其他请求需要认证
                .anyRequest().authenticated()
            )
            
            // 安全头配置
            .headers(headers -> headers
                .frameOptions().deny()
                .contentTypeOptions().and()
                .httpStrictTransportSecurity(hstsConfig -> hstsConfig
                    .maxAgeInSeconds(31536000)
                    .includeSubdomains(true)
                )
            );
        
        // 添加JWT过滤器
        http.addFilterBefore(jwtRequestFilter, UsernamePasswordAuthenticationFilter.class);
        
        // 认证提供者
        http.authenticationProvider(authenticationProvider());
        
        log.info("Security filter chain configured");
        
        return http.build();
    }
    
    /**
     * CORS配置
     */
    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration configuration = new CorsConfiguration();
        
        // 允许的来源
        configuration.setAllowedOriginPatterns(Arrays.asList(
            "http://localhost:3000",
            "http://localhost:8080",
            "https://*.company.com"
        ));
        
        // 允许的方法
        configuration.setAllowedMethods(Arrays.asList(
            "GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS"
        ));
        
        // 允许的头
        configuration.setAllowedHeaders(Arrays.asList("*"));
        
        // 允许认证信息
        configuration.setAllowCredentials(true);
        
        // 预检请求缓存时间
        configuration.setMaxAge(3600L);
        
        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/api/**", configuration);
        
        log.info("CORS configuration registered");
        
        return source;
    }
    
    /**
     * 访问拒绝处理器
     */
    @Bean
    public AccessDeniedHandler accessDeniedHandler() {
        return (request, response, accessDeniedException) -> {
            log.warn("Access denied: {} - {}", request.getRequestURI(), 
                accessDeniedException.getMessage());
            
            response.setContentType("application/json;charset=UTF-8");
            response.setStatus(HttpServletResponse.SC_FORBIDDEN);
            
            Map<String, Object> result = new HashMap<>();
            result.put("code", 403);
            result.put("message", "权限不足");
            result.put("timestamp", System.currentTimeMillis());
            
            ObjectMapper mapper = new ObjectMapper();
            response.getWriter().write(mapper.writeValueAsString(result));
        };
    }
    
    /**
     * Web安全配置（静态资源）
     */
    @Bean
    public WebSecurityCustomizer webSecurityCustomizer() {
        return web -> web.ignoring()
            .requestMatchers("/static/**", "/css/**", "/js/**", "/images/**")
            .requestMatchers("/favicon.ico", "/robots.txt");
    }
    
    /**
     * 方法级安全配置
     */
    @Bean
    public MethodSecurityExpressionHandler methodSecurityExpressionHandler() {
        DefaultMethodSecurityExpressionHandler handler = new DefaultMethodSecurityExpressionHandler();
        handler.setPermissionEvaluator(new CustomPermissionEvaluator());
        return handler;
    }
}
/* [AI-BLOCK-END] */
```

### 异步配置类
```java
/* [AI-BLOCK-START] - 生成工具: 配置规范 v2.0 */
@Configuration
@EnableAsync
@EnableScheduling
@Slf4j
public class AsyncConfig implements AsyncConfigurer {
    
    @Value("${app.async.core-pool-size:10}")
    private int corePoolSize;
    
    @Value("${app.async.max-pool-size:50}")
    private int maxPoolSize;
    
    @Value("${app.async.queue-capacity:200}")
    private int queueCapacity;
    
    @Value("${app.async.keep-alive-seconds:60}")
    private int keepAliveSeconds;
    
    /**
     * 默认异步执行器
     */
    @Bean(name = "taskExecutor")
    @Primary
    @Override
    public Executor getAsyncExecutor() {
        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
        
        // 线程池配置
        executor.setCorePoolSize(corePoolSize);
        executor.setMaxPoolSize(maxPoolSize);
        executor.setQueueCapacity(queueCapacity);
        executor.setKeepAliveSeconds(keepAliveSeconds);
        
        // 线程命名
        executor.setThreadNamePrefix("async-task-");
        
        // 拒绝策略
        executor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());
        
        // 等待任务完成后关闭
        executor.setWaitForTasksToCompleteOnShutdown(true);
        executor.setAwaitTerminationSeconds(30);
        
        executor.initialize();
        
        log.info("Default async executor configured: core={}, max={}, queue={}", 
            corePoolSize, maxPoolSize, queueCapacity);
        
        return executor;
    }
    
    /**
     * 邮件发送专用线程池
     */
    @Bean(name = "emailTaskExecutor")
    public Executor emailTaskExecutor() {
        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
        
        executor.setCorePoolSize(5);
        executor.setMaxPoolSize(10);
        executor.setQueueCapacity(100);
        executor.setKeepAliveSeconds(300);
        executor.setThreadNamePrefix("email-task-");
        
        // 邮件发送失败时使用调用者线程
        executor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());
        
        executor.setWaitForTasksToCompleteOnShutdown(true);
        executor.setAwaitTerminationSeconds(60);
        
        executor.initialize();
        
        log.info("Email task executor configured");
        
        return executor;
    }
    
    /**
     * 文件处理专用线程池
     */
    @Bean(name = "fileTaskExecutor")
    public Executor fileTaskExecutor() {
        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
        
        executor.setCorePoolSize(3);
        executor.setMaxPoolSize(5);
        executor.setQueueCapacity(50);
        executor.setKeepAliveSeconds(600);
        executor.setThreadNamePrefix("file-task-");
        
        // 文件处理队列满时直接拒绝
        executor.setRejectedExecutionHandler(new ThreadPoolExecutor.AbortPolicy());
        
        executor.setWaitForTasksToCompleteOnShutdown(true);
        executor.setAwaitTerminationSeconds(120);
        
        executor.initialize();
        
        log.info("File task executor configured");
        
        return executor;
    }
    
    /**
     * 定时任务调度器
     */
    @Bean(name = "taskScheduler")
    public TaskScheduler taskScheduler() {
        ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler();
        
        scheduler.setPoolSize(5);
        scheduler.setThreadNamePrefix("scheduled-task-");
        
        // 等待任务完成后关闭
        scheduler.setWaitForTasksToCompleteOnShutdown(true);
        scheduler.setAwaitTerminationSeconds(60);
        
        scheduler.initialize();
        
        log.info("Task scheduler configured");
        
        return scheduler;
    }
    
    /**
     * 异步异常处理器
     */
    @Override
    public AsyncUncaughtExceptionHandler getAsyncUncaughtExceptionHandler() {
        return new SimpleAsyncUncaughtExceptionHandler() {
            @Override
            public void handleUncaughtException(Throwable ex, Method method, Object... params) {
                log.error("Async method {} execution failed", method.getName(), ex);
                
                // 可以在这里添加异常通知逻辑
                // 比如发送告警邮件、记录错误日志等
                
                super.handleUncaughtException(ex, method, params);
            }
        };
    }
    
    /**
     * 线程池监控配置
     */
    @Bean
    public TaskExecutorMetrics taskExecutorMetrics() {
        return new TaskExecutorMetrics();
    }
    
    /**
     * 线程池健康检查
     */
    @Bean
    public HealthIndicator threadPoolHealthIndicator() {
        return () -> {
            ThreadPoolTaskExecutor executor = (ThreadPoolTaskExecutor) getAsyncExecutor();
            ThreadPoolExecutor threadPool = executor.getThreadPoolExecutor();
            
            int activeCount = threadPool.getActiveCount();
            int corePoolSize = threadPool.getCorePoolSize();
            int maxPoolSize = threadPool.getMaximumPoolSize();
            long queueSize = threadPool.getQueue().size();
            
            Health.Builder builder = Health.up()
                .withDetail("activeThreads", activeCount)
                .withDetail("corePoolSize", corePoolSize)
                .withDetail("maxPoolSize", maxPoolSize)
                .withDetail("queueSize", queueSize)
                .withDetail("completedTasks", threadPool.getCompletedTaskCount());
            
            // 如果活跃线程数过高，标记为DOWN
            if (activeCount > maxPoolSize * 0.9) {
                builder.down().withDetail("reason", "线程池使用率过高");
            }
            
            return builder.build();
        };
    }
}
/* [AI-BLOCK-END] */
```

---

*此配置类规范确保系统各个组件的正确配置、性能优化和安全保障*
description:
globs:
alwaysApply: false
---
