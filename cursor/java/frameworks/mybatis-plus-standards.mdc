# MyBatis-Plus 编程规范 (框架层规则)
> MyBatis-Plus框架的标准化使用规范和最佳实践

## 基础规范

### 框架版本要求
- **MyBatis-Plus**: 3.4.3+
- **MyBatis**: 3.5.7+
- **MySQL Connector**: 8.0.25+
- **HikariCP**: 4.0.3+

### 设计原则
- **约定优于配置**: 遵循MyBatis-Plus的约定，减少配置
- **代码生成优先**: 使用代码生成器提升开发效率
- **类型安全**: 使用Lambda表达式构建类型安全的查询
- **性能优化**: 合理使用插件和缓存策略
- **SQL可读性**: 复杂查询使用XML映射文件

## 强制行为

### 1. 项目配置规范

#### 依赖管理
```xml
<!-- [AI-BLOCK-START] - 生成工具: Claude 3.5 Sonnet -->
<dependencies>
    <!-- MyBatis-Plus -->
    <dependency>
        <groupId>com.baomidou</groupId>
        <artifactId>mybatis-plus-boot-starter</artifactId>
        <version>3.4.3</version>
    </dependency>
    
    <!-- MyBatis-Plus代码生成器 -->
    <dependency>
        <groupId>com.baomidou</groupId>
        <artifactId>mybatis-plus-generator</artifactId>
        <version>3.4.1</version>
        <scope>test</scope>
    </dependency>
    
    <!-- 模板引擎 -->
    <dependency>
        <groupId>org.apache.velocity</groupId>
        <artifactId>velocity-engine-core</artifactId>
        <version>2.3</version>
        <scope>test</scope>
    </dependency>
    
    <!-- 数据库连接池 -->
    <dependency>
        <groupId>com.zaxxer</groupId>
        <artifactId>HikariCP</artifactId>
    </dependency>
    
    <!-- MySQL驱动 -->
    <dependency>
        <groupId>mysql</groupId>
        <artifactId>mysql-connector-java</artifactId>
        <scope>runtime</scope>
    </dependency>
</dependencies>
<!-- [AI-BLOCK-END] -->
```

#### 配置文件标准
```yaml
# [AI-BLOCK-START] - 生成工具: Claude 3.5 Sonnet
# application.yml
spring:
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/database_name?useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
    username: ${DB_USERNAME:root}
    password: ${DB_PASSWORD:password}
    type: com.zaxxer.hikari.HikariDataSource
    hikari:
      # 连接池配置
      minimum-idle: 5
      maximum-pool-size: 20
      auto-commit: true
      idle-timeout: 30000
      pool-name: SpringBootJPAHikariCP
      max-lifetime: 1800000
      connection-timeout: 30000
      connection-test-query: SELECT 1

# MyBatis-Plus配置
mybatis-plus:
  # 配置文件位置
  config-location: classpath:mybatis-config.xml
  # 映射文件位置
  mapper-locations: classpath*:mapper/**/*.xml
  # 实体类包路径
  type-aliases-package: com.example.entity
  # 全局配置
  global-config:
    # 数据库配置
    db-config:
      # 主键策略
      id-type: ASSIGN_ID
      # 表名前缀
      table-prefix: ""
      # 表名下划线命名
      table-underline: true
      # 字段下划线命名
      column-underline: true
      # 逻辑删除配置
      logic-delete-field: deleted
      logic-delete-value: 1
      logic-not-delete-value: 0
      # 自动填充配置
      insert-strategy: NOT_NULL
      update-strategy: NOT_NULL
      select-strategy: NOT_NULL
  # MyBatis原生配置
  configuration:
    # 开启驼峰命名转换
    map-underscore-to-camel-case: true
    # 开启二级缓存
    cache-enabled: true
    # 延迟加载配置
    lazy-loading-enabled: true
    aggressive-lazy-loading: false
    # 超时时间
    default-statement-timeout: 30
    # 日志实现
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl

# 日志配置
logging:
  level:
    com.example.mapper: DEBUG
    com.baomidou.mybatisplus: DEBUG
# [AI-BLOCK-END]
```

### 2. 配置类规范

#### MyBatis-Plus配置类
```java
// [AI-BLOCK-START] - 生成工具: Claude 3.5 Sonnet
@Configuration
@EnableTransactionManagement
@MapperScan(basePackages = {"com.example.mapper"})
public class MyBatisPlusConfig {
    
    /**
     * MyBatis-Plus插件配置
     */
    @Bean
    public MybatisPlusInterceptor mybatisPlusInterceptor() {
        MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();
        
        // 1. 分页插件
        PaginationInnerInterceptor paginationInterceptor = new PaginationInnerInterceptor();
        paginationInterceptor.setDbType(DbType.MYSQL);
        paginationInterceptor.setMaxLimit(1000L); // 最大分页限制
        paginationInterceptor.setOverflow(false); // 溢出总页数后是否进行处理
        paginationInterceptor.setOptimizeJoin(true); // 优化JOIN查询
        interceptor.addInnerInterceptor(paginationInterceptor);
        
        // 2. 乐观锁插件
        OptimisticLockerInnerInterceptor optimisticLockerInterceptor = 
            new OptimisticLockerInnerInterceptor();
        interceptor.addInnerInterceptor(optimisticLockerInterceptor);
        
        // 3. 防止全表更新与删除插件
        BlockAttackInnerInterceptor blockAttackInterceptor = 
            new BlockAttackInnerInterceptor();
        interceptor.addInnerInterceptor(blockAttackInterceptor);
        
        // 4. SQL性能规范插件
        IllegalSQLInnerInterceptor illegalSQLInterceptor = 
            new IllegalSQLInnerInterceptor();
        interceptor.addInnerInterceptor(illegalSQLInterceptor);
        
        // 5. 数据权限插件
        DataPermissionInterceptor dataPermissionInterceptor = 
            new DataPermissionInterceptor();
        // 添加数据权限处理器
        dataPermissionInterceptor.setDataPermissionHandler(new DataPermissionHandler() {
            @Override
            public Expression getSqlSegment(Expression where, String mappedStatementId) {
                // 实现数据权限逻辑
                return where;
            }
        });
        interceptor.addInnerInterceptor(dataPermissionInterceptor);
        
        return interceptor;
    }
    
    /**
     * 全局配置
     */
    @Bean
    public GlobalConfig globalConfig() {
        GlobalConfig globalConfig = new GlobalConfig();
        
        // 数据库配置
        GlobalConfig.DbConfig dbConfig = new GlobalConfig.DbConfig();
        dbConfig.setIdType(IdType.ASSIGN_ID); // 主键策略
        dbConfig.setTableUnderline(true); // 表名下划线命名
        dbConfig.setColumnUnderline(true); // 字段下划线命名
        dbConfig.setLogicDeleteField("deleted"); // 逻辑删除字段
        dbConfig.setLogicDeleteValue("1"); // 逻辑删除值
        dbConfig.setLogicNotDeleteValue("0"); // 逻辑未删除值
        
        globalConfig.setDbConfig(dbConfig);
        
        // 自动填充配置
        globalConfig.setMetaObjectHandler(new CustomMetaObjectHandler());
        
        return globalConfig;
    }
    
    /**
     * 自定义元数据处理器
     */
    @Component
    public static class CustomMetaObjectHandler implements MetaObjectHandler {
        
        @Override
        public void insertFill(MetaObject metaObject) {
            // 创建时间
            this.strictInsertFill(metaObject, "createTime", LocalDateTime.class, LocalDateTime.now());
            // 更新时间
            this.strictInsertFill(metaObject, "updateTime", LocalDateTime.class, LocalDateTime.now());
            // 创建人
            this.strictInsertFill(metaObject, "createBy", String.class, getCurrentUserId());
            // 更新人
            this.strictInsertFill(metaObject, "updateBy", String.class, getCurrentUserId());
            // 逻辑删除
            this.strictInsertFill(metaObject, "deleted", Integer.class, 0);
        }
        
        @Override
        public void updateFill(MetaObject metaObject) {
            // 更新时间
            this.strictUpdateFill(metaObject, "updateTime", LocalDateTime.class, LocalDateTime.now());
            // 更新人
            this.strictUpdateFill(metaObject, "updateBy", String.class, getCurrentUserId());
        }
        
        private String getCurrentUserId() {
            // 获取当前用户ID的逻辑
            return "system"; // 默认值
        }
    }
    
    /**
     * SQL注入器
     */
    @Bean
    public ISqlInjector sqlInjector() {
        return new DefaultSqlInjector();
    }
    
    /**
     * 分页插件
     */
    @Bean
    public PaginationInterceptor paginationInterceptor() {
        PaginationInterceptor paginationInterceptor = new PaginationInterceptor();
        paginationInterceptor.setCountSqlParser(new JsqlParserCountOptimize(true));
        return paginationInterceptor;
    }
}
// [AI-BLOCK-END]
```

### 3. 实体类规范

#### 标准实体类设计
```java
// [AI-BLOCK-START] - 生成工具: Claude 3.5 Sonnet
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@EqualsAndHashCode(callSuper = true)
@ToString(callSuper = true)
@TableName("users")
public class User extends BaseEntity {
    
    /**
     * 主键ID
     */
    @TableId(type = IdType.ASSIGN_ID)
    private Long id;
    
    /**
     * 用户名
     */
    @TableField("username")
    @NotBlank(message = "用户名不能为空")
    @Length(min = 3, max = 50, message = "用户名长度必须在3-50个字符之间")
    private String username;
    
    /**
     * 邮箱
     */
    @TableField("email")
    @NotBlank(message = "邮箱不能为空")
    @Email(message = "邮箱格式不正确")
    private String email;
    
    /**
     * 手机号
     */
    @TableField("phone")
    @Pattern(regexp = "^1[3-9]\\d{9}$", message = "手机号格式不正确")
    private String phone;
    
    /**
     * 密码
     */
    @TableField("password")
    @JsonIgnore
    private String password;
    
    /**
     * 用户状态：1-正常，0-禁用
     */
    @TableField("status")
    @Builder.Default
    private Integer status = 1;
    
    /**
     * 用户角色
     */
    @TableField(exist = false)
    private List<Role> roles;
    
    /**
     * 版本号（乐观锁）
     */
    @Version
    @TableField("version")
    private Integer version;
}

/**
 * 基础实体类
 */
@Data
@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
public abstract class BaseEntity implements Serializable {
    
    /**
     * 创建时间
     */
    @TableField(value = "create_time", fill = FieldFill.INSERT)
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
    private LocalDateTime createTime;
    
    /**
     * 更新时间
     */
    @TableField(value = "update_time", fill = FieldFill.INSERT_UPDATE)
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
    private LocalDateTime updateTime;
    
    /**
     * 创建人
     */
    @TableField(value = "create_by", fill = FieldFill.INSERT)
    private String createBy;
    
    /**
     * 更新人
     */
    @TableField(value = "update_by", fill = FieldFill.INSERT_UPDATE)
    private String updateBy;
    
    /**
     * 逻辑删除：1-已删除，0-未删除
     */
    @TableLogic
    @TableField("deleted")
    @JsonIgnore
    private Integer deleted;
}
// [AI-BLOCK-END]
```

### 4. Mapper接口规范

#### 标准Mapper接口
```java
// [AI-BLOCK-START] - 生成工具: Claude 3.5 Sonnet
@Mapper
public interface UserMapper extends BaseMapper<User> {
    
    /**
     * 根据用户名查询用户信息
     * @param username 用户名
     * @return 用户信息
     */
    @Select("SELECT * FROM users WHERE username = #{username} AND deleted = 0")
    User selectByUsername(@Param("username") String username);
    
    /**
     * 根据邮箱查询用户信息
     * @param email 邮箱
     * @return 用户信息
     */
    @Select("SELECT * FROM users WHERE email = #{email} AND deleted = 0")
    User selectByEmail(@Param("email") String email);
    
    /**
     * 根据状态查询用户列表
     * @param status 状态
     * @return 用户列表
     */
    @Select("SELECT * FROM users WHERE status = #{status} AND deleted = 0 ORDER BY create_time DESC")
    List<User> selectByStatus(@Param("status") Integer status);
    
    /**
     * 分页查询用户列表（复杂查询使用XML）
     * @param page 分页参数
     * @param queryDTO 查询条件
     * @return 用户分页列表
     */
    IPage<User> selectUserPage(IPage<User> page, @Param("query") UserQueryDTO queryDTO);
    
    /**
     * 批量插入用户
     * @param users 用户列表
     * @return 影响行数
     */
    int insertBatch(@Param("users") List<User> users);
    
    /**
     * 根据部门ID查询用户统计
     * @param deptId 部门ID
     * @return 用户统计信息
     */
    UserStatisticsVO selectUserStatistics(@Param("deptId") Long deptId);
    
    /**
     * 更新用户最后登录时间
     * @param userId 用户ID
     * @param lastLoginTime 最后登录时间
     * @return 影响行数
     */
    @Update("UPDATE users SET last_login_time = #{lastLoginTime}, update_time = NOW() WHERE id = #{userId}")
    int updateLastLoginTime(@Param("userId") Long userId, @Param("lastLoginTime") LocalDateTime lastLoginTime);
    
    /**
     * 逻辑删除用户
     * @param userId 用户ID
     * @return 影响行数
     */
    @Update("UPDATE users SET deleted = 1, update_time = NOW() WHERE id = #{userId}")
    int deleteLogically(@Param("userId") Long userId);
}
// [AI-BLOCK-END]
```

### 5. XML映射文件规范

#### 标准XML映射文件
```xml
<!-- [AI-BLOCK-START] - 生成工具: Claude 3.5 Sonnet -->
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mapper.UserMapper">
    
    <!-- 基础结果映射 -->
    <resultMap id="BaseResultMap" type="com.example.entity.User">
        <id column="id" property="id" />
        <result column="username" property="username" />
        <result column="email" property="email" />
        <result column="phone" property="phone" />
        <result column="password" property="password" />
        <result column="status" property="status" />
        <result column="version" property="version" />
        <result column="create_time" property="createTime" />
        <result column="update_time" property="updateTime" />
        <result column="create_by" property="createBy" />
        <result column="update_by" property="updateBy" />
        <result column="deleted" property="deleted" />
    </resultMap>
    
    <!-- 用户角色关联结果映射 -->
    <resultMap id="UserWithRolesResultMap" type="com.example.entity.User" extends="BaseResultMap">
        <collection property="roles" ofType="com.example.entity.Role">
            <id column="role_id" property="id" />
            <result column="role_name" property="name" />
            <result column="role_code" property="code" />
        </collection>
    </resultMap>
    
    <!-- 基础查询字段 -->
    <sql id="Base_Column_List">
        id, username, email, phone, password, status, version,
        create_time, update_time, create_by, update_by, deleted
    </sql>
    
    <!-- 查询条件 -->
    <sql id="Query_Condition">
        <where>
            deleted = 0
            <if test="query.username != null and query.username != ''">
                AND username LIKE CONCAT('%', #{query.username}, '%')
            </if>
            <if test="query.email != null and query.email != ''">
                AND email LIKE CONCAT('%', #{query.email}, '%')
            </if>
            <if test="query.phone != null and query.phone != ''">
                AND phone = #{query.phone}
            </if>
            <if test="query.status != null">
                AND status = #{query.status}
            </if>
            <if test="query.startTime != null">
                AND create_time >= #{query.startTime}
            </if>
            <if test="query.endTime != null">
                AND create_time <= #{query.endTime}
            </if>
        </where>
    </sql>
    
    <!-- 分页查询用户列表 -->
    <select id="selectUserPage" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />
        FROM users
        <include refid="Query_Condition" />
        ORDER BY
        <choose>
            <when test="query.orderBy != null and query.orderBy != ''">
                ${query.orderBy}
                <if test="query.orderDirection != null and query.orderDirection != ''">
                    ${query.orderDirection}
                </if>
            </when>
            <otherwise>
                create_time DESC
            </otherwise>
        </choose>
    </select>
    
    <!-- 批量插入用户 -->
    <insert id="insertBatch" parameterType="java.util.List">
        INSERT INTO users (username, email, phone, password, status, create_time, update_time, create_by, update_by)
        VALUES
        <foreach collection="users" item="user" separator=",">
            (#{user.username}, #{user.email}, #{user.phone}, #{user.password}, #{user.status},
             NOW(), NOW(), #{user.createBy}, #{user.updateBy})
        </foreach>
    </insert>
    
    <!-- 用户统计查询 -->
    <select id="selectUserStatistics" resultType="com.example.vo.UserStatisticsVO">
        SELECT
            COUNT(*) as totalCount,
            SUM(CASE WHEN status = 1 THEN 1 ELSE 0 END) as activeCount,
            SUM(CASE WHEN status = 0 THEN 1 ELSE 0 END) as inactiveCount,
            SUM(CASE WHEN DATE(create_time) = CURDATE() THEN 1 ELSE 0 END) as todayCount
        FROM users
        WHERE deleted = 0
        <if test="deptId != null">
            AND dept_id = #{deptId}
        </if>
    </select>
    
    <!-- 查询用户及其角色信息 -->
    <select id="selectUserWithRoles" resultMap="UserWithRolesResultMap">
        SELECT
            u.id, u.username, u.email, u.phone, u.status,
            u.create_time, u.update_time, u.create_by, u.update_by,
            r.id as role_id, r.name as role_name, r.code as role_code
        FROM users u
        LEFT JOIN user_roles ur ON u.id = ur.user_id
        LEFT JOIN roles r ON ur.role_id = r.id
        WHERE u.deleted = 0 AND u.id = #{userId}
    </select>
    
</mapper>
<!-- [AI-BLOCK-END] -->
```

### 6. Service层使用规范

#### 标准Service实现
```java
// [AI-BLOCK-START] - 生成工具: Claude 3.5 Sonnet
@Service
@Transactional(rollbackFor = Exception.class)
@Slf4j
public class UserServiceImpl extends ServiceImpl<UserMapper, User> implements UserService {
    
    private final UserMapper userMapper;
    private final PasswordEncoder passwordEncoder;
    private final RedisTemplate<String, Object> redisTemplate;
    
    public UserServiceImpl(UserMapper userMapper, 
                          PasswordEncoder passwordEncoder,
                          RedisTemplate<String, Object> redisTemplate) {
        this.userMapper = userMapper;
        this.passwordEncoder = passwordEncoder;
        this.redisTemplate = redisTemplate;
    }
    
    @Override
    @Transactional(rollbackFor = Exception.class)
    public boolean createUser(UserCreateDTO createDTO) {
        // 1. 参数验证
        if (StringUtils.isBlank(createDTO.getUsername())) {
            throw new BusinessException("用户名不能为空");
        }
        
        // 2. 业务验证
        User existUser = userMapper.selectByUsername(createDTO.getUsername());
        if (existUser != null) {
            throw new BusinessException("用户名已存在");
        }
        
        existUser = userMapper.selectByEmail(createDTO.getEmail());
        if (existUser != null) {
            throw new BusinessException("邮箱已存在");
        }
        
        // 3. 数据转换
        User user = User.builder()
                .username(createDTO.getUsername())
                .email(createDTO.getEmail())
                .phone(createDTO.getPhone())
                .password(passwordEncoder.encode(createDTO.getPassword()))
                .status(1)
                .build();
        
        // 4. 保存数据
        boolean result = this.save(user);
        
        // 5. 清除相关缓存
        if (result) {
            clearUserCache(user.getId());
        }
        
        return result;
    }
    
    @Override
    @Transactional(rollbackFor = Exception.class)
    public boolean updateUser(Long userId, UserUpdateDTO updateDTO) {
        // 1. 查询用户
        User user = this.getById(userId);
        if (user == null) {
            throw new BusinessException("用户不存在");
        }
        
        // 2. 构建更新条件
        LambdaUpdateWrapper<User> updateWrapper = new LambdaUpdateWrapper<>();
        updateWrapper.eq(User::getId, userId);
        
        // 3. 动态更新字段
        if (StringUtils.isNotBlank(updateDTO.getEmail())) {
            // 检查邮箱是否已存在
            QueryWrapper<User> emailQuery = new QueryWrapper<>();
            emailQuery.eq("email", updateDTO.getEmail())
                     .ne("id", userId);
            if (this.count(emailQuery) > 0) {
                throw new BusinessException("邮箱已存在");
            }
            updateWrapper.set(User::getEmail, updateDTO.getEmail());
        }
        
        if (StringUtils.isNotBlank(updateDTO.getPhone())) {
            updateWrapper.set(User::getPhone, updateDTO.getPhone());
        }
        
        if (updateDTO.getStatus() != null) {
            updateWrapper.set(User::getStatus, updateDTO.getStatus());
        }
        
        // 4. 执行更新
        boolean result = this.update(updateWrapper);
        
        // 5. 清除缓存
        if (result) {
            clearUserCache(userId);
        }
        
        return result;
    }
    
    @Override
    @Transactional(readOnly = true)
    public IPage<User> getUserPage(UserQueryDTO queryDTO, int pageNum, int pageSize) {
        // 1. 构建分页对象
        Page<User> page = new Page<>(pageNum, pageSize);
        
        // 2. 构建查询条件
        LambdaQueryWrapper<User> queryWrapper = new LambdaQueryWrapper<>();
        queryWrapper.like(StringUtils.isNotBlank(queryDTO.getUsername()), 
                         User::getUsername, queryDTO.getUsername())
                   .like(StringUtils.isNotBlank(queryDTO.getEmail()), 
                         User::getEmail, queryDTO.getEmail())
                   .eq(queryDTO.getStatus() != null, 
                       User::getStatus, queryDTO.getStatus())
                   .ge(queryDTO.getStartTime() != null, 
                       User::getCreateTime, queryDTO.getStartTime())
                   .le(queryDTO.getEndTime() != null, 
                       User::getCreateTime, queryDTO.getEndTime())
                   .orderByDesc(User::getCreateTime);
        
        // 3. 执行查询
        return this.page(page, queryWrapper);
    }
    
    @Override
    @Transactional(readOnly = true)
    public User getUserByUsername(String username) {
        // 1. 先查缓存
        String cacheKey = "user:username:" + username;
        User cachedUser = (User) redisTemplate.opsForValue().get(cacheKey);
        if (cachedUser != null) {
            return cachedUser;
        }
        
        // 2. 查数据库
        User user = userMapper.selectByUsername(username);
        
        // 3. 缓存结果
        if (user != null) {
            redisTemplate.opsForValue().set(cacheKey, user, Duration.ofMinutes(30));
        }
        
        return user;
    }
    
    @Override
    @Transactional(rollbackFor = Exception.class)
    public boolean batchCreateUsers(List<UserCreateDTO> createDTOList) {
        if (CollectionUtils.isEmpty(createDTOList)) {
            return true;
        }
        
        // 1. 批量验证
        Set<String> usernameSet = new HashSet<>();
        Set<String> emailSet = new HashSet<>();
        
        for (UserCreateDTO createDTO : createDTOList) {
            if (!usernameSet.add(createDTO.getUsername())) {
                throw new BusinessException("用户名重复：" + createDTO.getUsername());
            }
            if (!emailSet.add(createDTO.getEmail())) {
                throw new BusinessException("邮箱重复：" + createDTO.getEmail());
            }
        }
        
        // 2. 数据转换
        List<User> users = createDTOList.stream()
                .map(dto -> User.builder()
                        .username(dto.getUsername())
                        .email(dto.getEmail())
                        .phone(dto.getPhone())
                        .password(passwordEncoder.encode(dto.getPassword()))
                        .status(1)
                        .build())
                .collect(Collectors.toList());
        
        // 3. 批量保存
        return this.saveBatch(users, 1000); // 每批1000条
    }
    
    @Override
    @Transactional(rollbackFor = Exception.class)
    public boolean deleteUser(Long userId) {
        // 1. 检查用户是否存在
        User user = this.getById(userId);
        if (user == null) {
            throw new BusinessException("用户不存在");
        }
        
        // 2. 执行逻辑删除
        boolean result = this.removeById(userId);
        
        // 3. 清除缓存
        if (result) {
            clearUserCache(userId);
        }
        
        return result;
    }
    
    /**
     * 清除用户相关缓存
     */
    private void clearUserCache(Long userId) {
        try {
            // 清除用户缓存
            redisTemplate.delete("user:id:" + userId);
            
            // 清除用户名缓存（需要先查询用户名）
            User user = this.getById(userId);
            if (user != null) {
                redisTemplate.delete("user:username:" + user.getUsername());
            }
            
            // 清除其他相关缓存
            redisTemplate.delete("user:roles:" + userId);
            
        } catch (Exception e) {
            log.warn("清除用户缓存失败: userId={}", userId, e);
        }
    }
}
// [AI-BLOCK-END]
```

### 7. 性能优化规范

#### 查询优化策略
```java
// [AI-BLOCK-START] - 生成工具: Claude 3.5 Sonnet
@Service
public class UserQueryOptimizationService {
    
    private final UserMapper userMapper;
    
    /**
     * 使用索引优化查询
     */
    public List<User> findUsersByStatusOptimized(Integer status) {
        // 使用索引字段查询
        LambdaQueryWrapper<User> queryWrapper = new LambdaQueryWrapper<>();
        queryWrapper.eq(User::getStatus, status)
                   .select(User::getId, User::getUsername, User::getEmail) // 只查询需要的字段
                   .orderByDesc(User::getCreateTime); // 使用索引排序
        
        return userMapper.selectList(queryWrapper);
    }
    
    /**
     * 分页查询优化
     */
    public IPage<User> findUsersWithPagination(UserQueryDTO queryDTO, int pageNum, int pageSize) {
        // 使用MyBatis-Plus分页插件
        Page<User> page = new Page<>(pageNum, pageSize);
        
        // 构建查询条件
        LambdaQueryWrapper<User> queryWrapper = new LambdaQueryWrapper<>();
        queryWrapper.like(StringUtils.isNotBlank(queryDTO.getUsername()), 
                         User::getUsername, queryDTO.getUsername())
                   .eq(queryDTO.getStatus() != null, 
                       User::getStatus, queryDTO.getStatus())
                   .ge(queryDTO.getStartTime() != null, 
                       User::getCreateTime, queryDTO.getStartTime())
                   .le(queryDTO.getEndTime() != null, 
                       User::getCreateTime, queryDTO.getEndTime())
                   .orderByDesc(User::getCreateTime);
        
        return userMapper.selectPage(page, queryWrapper);
    }
    
    /**
     * 批量查询优化
     */
    public List<User> findUsersByIds(List<Long> userIds) {
        if (CollectionUtils.isEmpty(userIds)) {
            return Collections.emptyList();
        }
        
        // 使用IN查询
        LambdaQueryWrapper<User> queryWrapper = new LambdaQueryWrapper<>();
        queryWrapper.in(User::getId, userIds)
                   .select(User::getId, User::getUsername, User::getEmail, User::getStatus);
        
        return userMapper.selectList(queryWrapper);
    }
    
    /**
     * 统计查询优化
     */
    public Long countUsersByStatus(Integer status) {
        LambdaQueryWrapper<User> queryWrapper = new LambdaQueryWrapper<>();
        queryWrapper.eq(User::getStatus, status);
        
        return userMapper.selectCount(queryWrapper);
    }
    
    /**
     * 复杂查询使用XML映射
     */
    public IPage<User> findUsersWithComplexConditions(IPage<User> page, UserQueryDTO queryDTO) {
        // 复杂查询使用XML映射文件
        return userMapper.selectUserPage(page, queryDTO);
    }
}
// [AI-BLOCK-END]
```

## 禁止行为

### 1. 配置相关禁令
- **禁止跳过插件配置**: 必须配置分页、乐观锁、防攻击等插件
- **禁止硬编码数据库配置**: 敏感信息使用环境变量或配置中心
- **禁止忽略逻辑删除配置**: 必须配置逻辑删除字段和值
- **禁止不配置自动填充**: 审计字段必须配置自动填充

### 2. 实体类设计禁令
- **禁止不继承BaseEntity**: 所有实体必须继承基础实体类
- **禁止忽略表名映射**: 使用@TableName明确指定表名
- **禁止不配置逻辑删除**: 必须使用@TableLogic注解
- **禁止不配置乐观锁**: 重要实体必须配置@Version字段

### 3. Mapper接口禁令
- **禁止不继承BaseMapper**: 所有Mapper必须继承BaseMapper
- **禁止直接使用字符串字段名**: 使用Lambda表达式引用字段
- **禁止忽略参数注解**: 多参数方法必须使用@Param注解
- **禁止复杂查询使用注解**: 复杂查询必须使用XML映射文件

### 4. Service层使用禁令
- **禁止不使用条件构造器**: 动态查询必须使用QueryWrapper
- **禁止忽略事务注解**: 数据修改操作必须配置事务
- **禁止不处理异常**: 必须处理和转换底层异常
- **禁止不清理缓存**: 数据变更后必须清理相关缓存

### 5. 性能相关禁令
- **禁止不使用分页**: 大数据量查询必须使用分页
- **禁止查询全部字段**: 只查询需要的字段
- **禁止N+1查询**: 避免在循环中执行查询
- **禁止不使用索引**: 查询条件必须使用索引字段
- **禁止批量操作不分批**: 大批量操作必须分批处理

## 示例代码

### 代码生成器配置
```java
// [AI-BLOCK-START] - 生成工具: Claude 3.5 Sonnet
@Test
public void generateCode() {
    // 代码生成器
    AutoGenerator generator = new AutoGenerator();
    
    // 全局配置
    GlobalConfig globalConfig = new GlobalConfig();
    globalConfig.setOutputDir(System.getProperty("user.dir") + "/src/main/java");
    globalConfig.setAuthor("系统生成");
    globalConfig.setOpen(false);
    globalConfig.setFileOverride(true);
    globalConfig.setServiceName("%sService");
    globalConfig.setIdType(IdType.ASSIGN_ID);
    globalConfig.setDateType(DateType.ONLY_DATE);
    generator.setGlobalConfig(globalConfig);
    
    // 数据源配置
    DataSourceConfig dataSourceConfig = new DataSourceConfig();
    dataSourceConfig.setUrl("jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncoding=utf8&useSSL=false");
    dataSourceConfig.setDriverName("com.mysql.cj.jdbc.Driver");
    dataSourceConfig.setUsername("root");
    dataSourceConfig.setPassword("password");
    generator.setDataSource(dataSourceConfig);
    
    // 包配置
    PackageConfig packageConfig = new PackageConfig();
    packageConfig.setParent("com.example");
    packageConfig.setEntity("entity");
    packageConfig.setMapper("mapper");
    packageConfig.setService("service");
    packageConfig.setController("controller");
    generator.setPackageInfo(packageConfig);
    
    // 策略配置
    StrategyConfig strategyConfig = new StrategyConfig();
    strategyConfig.setNaming(NamingStrategy.underline_to_camel);
    strategyConfig.setColumnNaming(NamingStrategy.underline_to_camel);
    strategyConfig.setEntityLombokModel(true);
    strategyConfig.setRestControllerStyle(true);
    strategyConfig.setInclude("users", "roles", "user_roles");
    strategyConfig.setControllerMappingHyphenStyle(true);
    strategyConfig.setTablePrefix("t_");
    strategyConfig.setLogicDeleteFieldName("deleted");
    strategyConfig.setVersionFieldName("version");
    strategyConfig.setEntityTableFieldAnnotationEnable(true);
    generator.setStrategy(strategyConfig);
    
    // 模板配置
    TemplateConfig templateConfig = new TemplateConfig();
    templateConfig.setXml(null);
    generator.setTemplate(templateConfig);
    
    // 执行生成
    generator.execute();
}
// [AI-BLOCK-END]
```

这个规范文件提供了MyBatis-Plus的全面使用指南，包括：

1. **项目配置**: 依赖管理、配置文件、插件配置
2. **实体类设计**: 注解使用、字段映射、审计字段
3. **Mapper接口**: 继承BaseMapper、自定义方法、XML映射
4. **Service层**: 条件构造器、事务管理、缓存策略
5. **性能优化**: 查询优化、分页处理、批量操作
6. **代码生成**: 代码生成器配置和使用

所有示例代码都使用了AI-BLOCK标记，便于AI工具识别和应用。
description:
globs:
alwaysApply: false
---
