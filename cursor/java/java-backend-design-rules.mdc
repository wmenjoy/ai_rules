---
description: 
globs: 
alwaysApply: true
---

你是一个java语言编程专家，擅长SpringBoot2.2.0, SpringFramework, Maven, Junit和其他相关的技术

## 技术栈

- JDK：8
- 使用Spring Boot：2.2.0的Feature，遵守相关最佳实践
- MyBatis-Plus：3.4.3
- Apache Commons：兼容的最新版本
- MySQL：5.8
- Redis：4
- Kafka：0.10.0.0
- 使用lombok 来管理java bean的set,get， builder, constructor等

## 代码注释
1. 必须遵守 @ai-code-rules.mdc 

## 代码框架生成
1. 生成必要的.gitignore
2. 生成必要的Makefile， Readme
3. 生成相应的dockerfile， docker-compose
4. 框架遵守必须遵守@project_org_rules.mdc
  


## 编码规范

### 通用

1. 遵循 Google Java 风格指南（https://google.github.io/styleguide/javaguide.html）
2. 所有的代码使用 Spring Boot 最佳实践和 conventions
3. 使用 4 个空格缩进，不使用 Tab
4. 最大行长度：120 个字符
5. 所有文件使用 UTF-8 编码
6. 文件名与类名保持一致
7. 创建Web Services的时候使用RESTful API设计风格.

### 命名规范

1. 包名：全部小写，如 `com.company.project.controller`
2. 类名：首字母大写，如 `UserController`、`UserService`
3. 接口：首字母大写，通常以 `I` 前缀，如 `IUserService`
4. 方法名：小驼峰，如 `getUserById`
5. 变量名：小驼峰，如 `userId`
6. 常量：全大写，下划线分隔，如 `MAX_RETRY_COUNT`
7. 数据库表：小写，下划线，如 `user_info`
8. 数据库列：小写，下划线，如 `create_time`


## 代码组织

### 控制层（Controller）

- 使用 `@RestController` 注解标识 REST 接口
- 使用 `@RequestMapping`、`@GetMapping`、`@PostMapping` 等映射路径
- 返回合适的 HTTP 状态码
- 请求和响应使用 DTO 封装

### 服务层（Service）

- 在实现类中编写业务逻辑
- 使用接口定义服务契约
- 使用 `@Service` 注解
- 在此层处理事务，使用 `@Transactional`

### 持久层（Mapper/DAO）

- 继承 MyBatis-Plus 的 `BaseMapper` 提供 CRUD
- 自定义操作在接口中声明，XML 或注解实现
- 使用 `@Mapper` 注解

### 实体层（Entity）

- 使用 `@TableName` 标注表名
- 使用 `@TableId` 标注主键字段
- 使用 `@TableField` 标注普通字段
- 实现 `Serializable` 接口

### Spring Boot 规范
- use Spring Boot starters for quick project setup and dependency management.
- Implement proper use of annotations (e.g., @SpringBootApplication, @RestController, @Service).
- Utilize Spring Boot's auto-configuration features effectively.
- Implement proper exception handling using @ControllerAdvice and @ExceptionHandler.
- Implement proper validation using Bean Validation (e.g., @Valid, custom validators).

### 依赖注入和IOC
- Use constructor injection over field injection for better testability.
- Leverage Spring's IoC container for managing bean lifecycles.



## 文档规范

1. 每个类使用类级别 Javadoc
2. 公共方法添加方法级别 Javadoc
3. 使用 `@author`、`@version`、`@since` 标签
4. 对复杂算法或业务逻辑进行详细说明
5. - Use Springdoc OpenAPI (formerly Swagger) for API documentation.


## 数据库规范

1. 默认使用 InnoDB 存储引擎
2. 使用 UTF-8 字符集
3. 表名、列名使用小写下划线命名法
4. 每张表必须定义主键
5. 约束命名规则：
   - 主键：`pk_表名`
   - 外键：`fk_表名_引用表名`
   - 唯一键：`uk_表名_字段名`
   - 索引：`idx_表名_字段名`
6. 标准列：
   - `id`: bigint, 主键
   - `create_time`: datetime
   - `update_time`: datetime
   - `create_by`: varchar
   - `update_by`: varchar
   - `is_deleted`: tinyint (逻辑删除)

## 依赖管理

1. 在父 POM 中统一管理各依赖版本
2. 使用 `<dependencyManagement>` 控制版本
3. 避免重复引入
4. 定期审计依赖安全性

## 配置管理

1. 使用 `application.yml` 作为通用配置
2. 使用 `application-{profile}.yml` 区分环境
3. 敏感信息使用环境变量或配置中心
4. 使用 `@ConfigurationProperties` 绑定配置


## 日志管理

1. 使用 SLF4J + Logback
2. 日志级别：
   - ERROR：错误必须立即关注
   - WARN：潜在风险
   - INFO：正常业务流程
   - DEBUG：调试时使用
3. 日志中添加上下文信息（如用户 ID、请求 ID）
4. 配置滚动策略，合理留存
5. Use Spring Boot Actuator for application monitoring and metrics.

## 异常处理

1. 自定义业务异常类
2. 使用 `@ControllerAdvice` 统一处理
3. 返回统一的错误响应结构
4. 合理记录异常日志

## 安全规范

1. 使用 Spring Security 进行鉴权
2. 输入数据校验，防止 XSS/SQL 注入
3. 生产环境强制使用 HTTPS
4. 密码使用安全算法哈希存储， (e.g., BCrypt).
5. 遵循最小权限原则
6. Implement CORS configuration when necessary.

## 测试规范

1. 覆盖率不低于 70%
2. 单元测试关注服务和工具类
3. 集成测试覆盖控制层
4. 使用 MockMvc 测试 Controller
5. 使用 H2 内存库进行测试
6. 使用 JUnit 5 + Mockito + Spring Boot Test.

## Redis 规范

1. 键命名：`{service}:{entity}:{id}`
2. 设置合理 TTL
3. 分布式锁场景使用 Redisson/Redis 锁
4. 处理好异常及重连机制

## Kafka 规范

1. 主题命名：`{环境}.{服务}.{实体}.{操作}`
2. 消息生产端幂等、重试配置
3. 消费端关注偏移量提交与错误处理
4. 配置死信队列

## CI/CD 规范

1. 遵循 Git Flow 分支模型
2. 合并前必须 Code Review
3. 每次提交触发自动化测试
4. 使用 CI 工具（Jenkins/GitHub Actions）
5. 自动化部署到各环境
6. Use Docker for containerization if applicable.

## 性能优化

1. 大数据量查询使用分页
2. 常用数据缓存适当使用 Cache
3. 数据库添加必要索引
4. 优化 SQL，避免全表扫描
5. 耗时任务异步执行
6. 长耗时操作（如日志流）必须设置超时机制
7. 资源密集型操作必须实现限流和熔断机制
8. 所有删除和重启等敏感操作必须具备幂等性
9. API 响应必须设置合适的缓存控制头部

## 监控与可观测性

1. 实现健康检查接口
2. 告警配置，及时响应异常

## Development Guidelines
### effective_java_notes:
  chapter_2:
    title: "Creating and Destroying Objects"
    items:
      - "Consider static factory methods instead of constructors"
      - "Consider a builder when faced with many constructor parameters"
      - "Enforce the singleton property with a private constructor or an enum type"
      - "Enforce noninstantiability with a private constructor"
      - "Prefer dependency injection to hardwiring resources"
      - "Avoid creating unnecessary objects"
      - "Eliminate obsolete object references"
      - "Avoid finalizers and cleaners"
      - "Prefer try-with-resources to try-finally"

  chapter_3:
    title: "Methods Common to All Objects"
    items:
      - "Obey the general contract when overriding equals"
      - "Always override hashCode when you override equals"
      - "Always override toString"
      - "Override clone judiciously"
      - "Consider implementing Comparable"

  chapter_4:
    title: "Classes and Interfaces"
    items:
      - "Minimize the accessibility of classes and members"
      - "In public classes, use accessor methods, not public fields"
      - "Minimize mutability"
      - "Favor composition over inheritance"
      - "Design and document for inheritance or else prohibit it"
      - "Prefer interfaces to abstract classes"
      - "Design interfaces for posterity"
      - "Use interfaces only to define types"
      - "Prefer class hierarchies to tagged classes"
      - "Favor static member classes over nonstatic"
      - "Limit source files to a single top-level class"

  chapter_5:
    title: "Generics"
    items:
      - "Don't use raw types"
      - "Eliminate unchecked warnings"
      - "Prefer lists to arrays"
      - "Favor generic types"
      - "Favor generic methods"
      - "Use bounded wildcards to increase API flexibility"
      - "Combine generics and varargs judiciously"
      - "Consider typesafe heterogeneous containers"

  chapter_6:
    title: "Enums and Annotations"
    items:
      - "Use enums instead of int constants"
      - "Use instance fields instead of ordinals"
      - "Use EnumSet instead of bit fields"
      - "Use EnumMap instead of ordinal indexing"
      - "Emulate extensible enums with interfaces"
      - "Prefer annotations to naming patterns"
      - "Consistently use the Override annotation"
      - "Use marker interfaces to define types"

  chapter_7:
    title: "Lambdas and Streams"
    items:
      - "Prefer lambdas to anonymous classes"
      - "Prefer method references to lambdas"
      - "Favor the use of standard functional interfaces"
      - "Use streams judiciously"
      - "Prefer side-effect-free functions in streams"
      - "Prefer Collection to Stream as a return type"
      - "Use caution when making streams parallel"

  chapter_8:
    title: "Methods"
    items:
      - "Check parameters for validity"
      - "Make defensive copies when needed"
      - "Design method signatures carefully"
      - "Use overloading judiciously"
      - "Use varargs judiciously"
      - "Return empty collections or arrays, not nulls"
      - "Return optionals judiciously"
      - "Write doc comments for all exposed API elements"

  chapter_9:
    title: "General Programming"
    items:
      - "Minimize the scope of local variables"
      - "Prefer for-each loops to traditional for loops"
      - "Know and use the libraries"
      - "Avoid float and double if exact answers are required"
      - "Prefer primitive types to boxed primitives"
      - "Avoid strings where other types are more appropriate"
      - "Beware the performance of string concatenation"
      - "Refer to objects by their interfaces"
      - "Prefer interfaces to reflection"
      - "Use native methods judiciously"
      - "Optimize judiciously"
      - "Adhere to generally accepted naming conventions"

  chapter_10:
    title: "Exceptions"
    items:
      - "Use exceptions only for exceptional conditions"
      - "Use checked exceptions for recoverable conditions and runtime exceptions for programming errors"
      - "Avoid unnecessary use of checked exceptions"
      - "Favor the use of standard exceptions"
      - "Throw exceptions appropriate to the abstraction"
      - "Document all exceptions thrown by each method"
      - "Include failure-capture information in detail messages"
      - "Strive for failure atomicity"
      - "Don't ignore exceptions"

  chapter_11:
    title: "Concurrency"
    items:
      - "Synchronize access to shared mutable data"
      - "Avoid excessive synchronization"
      - "Prefer executors, tasks, and streams to threads"
      - "Prefer concurrency utilities to wait and notify"
      - "Document thread safety"
      - "Use lazy initialization judiciously"
      - "Don't depend on the thread scheduler"

  chapter_12:
    title: "Serialization"
    items:
      - "Prefer alternatives to Java serialization"
      - "Implement Serializable with great caution"
      - "Consider using a custom serialized form"
      - "Write readObject methods defensively"
      - "For instance control, prefer enum types to readResolve"
      - "Consider serialization proxies instead of serialized instances"

## 遵守最佳实践
concurrency_guidelines:
  - "Try to not maintain state in the class"

### functional_programming_guidelines:
  - "Try to use immutable objects"
  - "Try to not mutate the state of the objects"

### data_oriented_programming_pillars:
  - "Separate code from data"
  - "Represent data with generic data structures"
  - "Data should be immutable"
  - "Use pure functions to manipulate data"
  - "Keep data flat and denormalized"
  - "Keep data generic until it needs to be specific"
  - "Data integrity is maintained through validation functions"
  - "Data access should be flexible and generic"
  - "Data transformation should be explicit and traceable"
  - "Data flow should be unidirectional"

###  其他通用规则
1. RESTful API design (proper use of HTTP methods, status codes, etc.).
2. Microservices architecture (if applicable).
3. Asynchronous processing using Spring's @Async or reactive programming with Spring WebFlux.
4. Adhere to SOLID principles and maintain high cohesion and low coupling in your Spring Boot application design.
5. 参考@common-language-rules

