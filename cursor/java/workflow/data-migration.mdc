# 数据迁移流程 (流程层规则)
> 数据库版本管理、迁移脚本编写和安全回滚的标准化流程

## 基础规范

### 数据迁移原则
- **版本化管理**：所有数据库变更都有版本号
- **向前兼容**：新版本兼容旧版本数据结构
- **增量更新**：只迁移变更的部分，不全量替换
- **可回滚性**：每个迁移都有对应的回滚脚本
- **幂等性**：迁移脚本可以重复执行

### 迁移工具选择
- **Flyway**：主推的数据库迁移工具
- **Liquibase**：复杂场景的替代方案
- **脚本命名**：遵循版本号+描述的命名规范
- **执行顺序**：按版本号顺序执行迁移
- **状态跟踪**：记录迁移执行状态和结果

### 环境管理策略
- **开发环境**：频繁迁移，快速迭代
- **测试环境**：完整的迁移测试
- **预生产环境**：生产数据的迁移验证
- **生产环境**：谨慎的迁移执行
- **数据备份**：迁移前必须备份数据

### 安全措施
- **权限控制**：迁移操作需要特殊权限
- **审批流程**：生产环境迁移需要审批
- **监控告警**：迁移过程的实时监控
- **回滚预案**：快速回滚的应急方案
- **影响评估**：评估迁移对业务的影响

## 强制行为

### 迁移脚本编写
- **SQL标准**：使用标准SQL语法，避免数据库特定语法
- **事务控制**：大型迁移使用事务确保原子性
- **批量处理**：大数据量迁移分批执行
- **索引管理**：迁移后重建或更新索引
- **约束检查**：验证数据完整性约束

### 版本管理要求
- **版本号格式**：V{major}.{minor}.{patch}__{description}
- **时间戳**：脚本包含创建时间戳
- **作者信息**：记录脚本作者和修改人
- **变更说明**：详细描述变更内容和影响
- **依赖关系**：明确脚本间的依赖关系

### 测试验证流程
- **语法检查**：迁移前检查SQL语法
- **影响范围**：评估迁移影响的数据量
- **性能测试**：大数据量迁移的性能测试
- **回滚测试**：验证回滚脚本的正确性
- **业务验证**：迁移后的业务功能验证

### 执行监控要求
- **进度跟踪**：实时监控迁移进度
- **性能指标**：监控数据库性能变化
- **错误日志**：详细记录迁移过程中的错误
- **资源使用**：监控CPU、内存、磁盘使用
- **业务影响**：监控业务系统的可用性

## 禁止行为

### 迁移脚本禁令
- **禁止DROP TABLE**：生产环境不删除表，使用重命名
- **禁止大批量DELETE**：避免长时间锁表
- **禁止无WHERE条件的UPDATE**：必须有明确的更新条件
- **禁止直接修改主键**：主键变更需要特殊处理
- **禁止跨库操作**：迁移脚本不涉及多个数据库

### 执行时机禁令
- **禁止业务高峰期执行**：避免影响正常业务
- **禁止未经测试直接上生产**：必须经过完整测试
- **禁止没有备份就迁移**：迁移前必须备份数据
- **禁止忽略依赖检查**：检查应用程序兼容性
- **禁止并发执行多个迁移**：避免数据冲突

### 回滚禁令
- **禁止没有回滚方案**：每个迁移必须有回滚脚本
- **禁止数据丢失的回滚**：回滚不能导致数据丢失
- **禁止长时间回滚**：回滚时间过长需要重新评估
- **禁止部分回滚**：回滚必须是完整的版本回滚
- **禁止忽略回滚验证**：回滚后必须验证数据正确性

### 安全禁令
- **禁止明文存储敏感信息**：迁移脚本不包含明文密码
- **禁止超级用户执行**：使用专门的迁移用户
- **禁止忽略权限检查**：验证操作权限的有效性
- **禁止跳过审批流程**：生产环境迁移必须审批
- **禁止无监控执行**：迁移过程必须有监控

## 示例代码

### Flyway配置和迁移脚本
```java
/* [AI-BLOCK-START] - 生成工具: 数据迁移流程 v2.0 */
/**
 * Flyway数据库迁移配置
 */
@Configuration
@ConditionalOnProperty(name = "spring.flyway.enabled", havingValue = "true", matchIfMissing = true)
@Slf4j
public class FlywayConfig {
    
    @Value("${spring.datasource.url}")
    private String dataSourceUrl;
    
    @Value("${spring.datasource.username}")
    private String dataSourceUsername;
    
    @Value("${spring.datasource.password}")
    private String dataSourcePassword;
    
    @Value("${spring.flyway.baseline-on-migrate:true}")
    private boolean baselineOnMigrate;
    
    @Value("${spring.flyway.validate-on-migrate:true}")
    private boolean validateOnMigrate;
    
    @Value("${spring.flyway.out-of-order:false}")
    private boolean outOfOrder;
    
    /**
     * Flyway配置
     */
    @Bean
    public Flyway flyway(DataSource dataSource) {
        Flyway flyway = Flyway.configure()
            .dataSource(dataSource)
            .locations("classpath:db/migration")
            .baselineOnMigrate(baselineOnMigrate)
            .validateOnMigrate(validateOnMigrate)
            .outOfOrder(outOfOrder)
            .baselineVersion("0")
            .encoding(StandardCharsets.UTF_8)
            .placeholderReplacement(true)
            .placeholders(getPlaceholders())
            .callbacks(new FlywayMigrationCallback())
            .load();
        
        log.info("Flyway configured with locations: classpath:db/migration");
        
        return flyway;
    }
    
    /**
     * 获取占位符配置
     */
    private Map<String, String> getPlaceholders() {
        Map<String, String> placeholders = new HashMap<>();
        placeholders.put("database.charset", "utf8mb4");
        placeholders.put("database.collation", "utf8mb4_unicode_ci");
        return placeholders;
    }
    
    /**
     * 应用启动时执行迁移
     */
    @Bean
    public FlywayMigrationInitializer flywayInitializer(Flyway flyway) {
        return new FlywayMigrationInitializer(flyway);
    }
    
    /**
     * 迁移信息服务
     */
    @Bean
    public MigrationInfoService migrationInfoService(Flyway flyway) {
        return new MigrationInfoService(flyway);
    }
}

/**
 * Flyway迁移回调
 */
@Slf4j
public class FlywayMigrationCallback implements Callback {
    
    @Override
    public boolean supports(Event event, Context context) {
        return true;
    }
    
    @Override
    public boolean canHandleInTransaction(Event event, Context context) {
        return true;
    }
    
    @Override
    public void handle(Event event, Context context) {
        MigrationInfo migrationInfo = context.getMigrationInfo();
        
        switch (event) {
            case BEFORE_MIGRATE:
                log.info("开始数据库迁移...");
                break;
            case AFTER_MIGRATE:
                log.info("数据库迁移完成");
                break;
            case BEFORE_EACH_MIGRATE:
                log.info("开始执行迁移: {} - {}", 
                    migrationInfo.getVersion(), migrationInfo.getDescription());
                break;
            case AFTER_EACH_MIGRATE:
                log.info("迁移执行完成: {} - {} (耗时: {}ms)", 
                    migrationInfo.getVersion(), 
                    migrationInfo.getDescription(),
                    migrationInfo.getExecutionTime());
                break;
            case BEFORE_EACH_MIGRATE_STATEMENT:
                log.debug("执行SQL语句: {}", context.getStatement());
                break;
            case AFTER_MIGRATE_ERROR:
                log.error("迁移执行失败: {} - {}", 
                    migrationInfo.getVersion(), migrationInfo.getDescription());
                break;
        }
    }
}

/**
 * 迁移信息服务
 */
@Service
@Slf4j
public class MigrationInfoService {
    
    private final Flyway flyway;
    
    public MigrationInfoService(Flyway flyway) {
        this.flyway = flyway;
    }
    
    /**
     * 获取迁移状态信息
     */
    public MigrationStatusInfo getMigrationStatus() {
        MigrationInfo[] migrationInfos = flyway.info().all();
        
        List<MigrationDetail> migrations = Arrays.stream(migrationInfos)
            .map(this::convertToMigrationDetail)
            .collect(Collectors.toList());
        
        long pendingCount = Arrays.stream(migrationInfos)
            .filter(info -> info.getState() == MigrationState.PENDING)
            .count();
        
        long successCount = Arrays.stream(migrationInfos)
            .filter(info -> info.getState() == MigrationState.SUCCESS)
            .count();
        
        long failedCount = Arrays.stream(migrationInfos)
            .filter(info -> info.getState() == MigrationState.FAILED)
            .count();
        
        return MigrationStatusInfo.builder()
            .migrations(migrations)
            .totalCount(migrationInfos.length)
            .pendingCount(pendingCount)
            .successCount(successCount)
            .failedCount(failedCount)
            .currentVersion(flyway.info().current() != null ? 
                flyway.info().current().getVersion().toString() : "无")
            .build();
    }
    
    /**
     * 执行迁移
     */
    public MigrationResult executeMigration() {
        try {
            log.info("开始执行数据库迁移...");
            
            MigrationInfo[] pendingMigrations = flyway.info().pending();
            if (pendingMigrations.length == 0) {
                log.info("没有需要执行的迁移");
                return MigrationResult.builder()
                    .success(true)
                    .message("没有需要执行的迁移")
                    .migrationsExecuted(0)
                    .build();
            }
            
            // 执行迁移
            org.flywaydb.core.api.output.MigrateResult result = flyway.migrate();
            
            log.info("迁移执行完成: 成功执行 {} 个迁移", result.migrationsExecuted);
            
            return MigrationResult.builder()
                .success(true)
                .message("迁移执行成功")
                .migrationsExecuted(result.migrationsExecuted)
                .targetSchemaVersion(result.targetSchemaVersion)
                .build();
            
        } catch (Exception e) {
            log.error("迁移执行失败", e);
            return MigrationResult.builder()
                .success(false)
                .message("迁移执行失败: " + e.getMessage())
                .error(e.getMessage())
                .build();
        }
    }
    
    /**
     * 验证迁移
     */
    public ValidationResult validateMigrations() {
        try {
            flyway.validate();
            
            return ValidationResult.builder()
                .valid(true)
                .message("迁移验证通过")
                .build();
                
        } catch (FlywayException e) {
            log.error("迁移验证失败", e);
            return ValidationResult.builder()
                .valid(false)
                .message("迁移验证失败: " + e.getMessage())
                .error(e.getMessage())
                .build();
        }
    }
    
    /**
     * 修复迁移状态
     */
    public RepairResult repairMigrations() {
        try {
            log.info("开始修复迁移状态...");
            
            org.flywaydb.core.api.output.RepairResult result = flyway.repair();
            
            log.info("迁移状态修复完成: 移除了 {} 个失败的迁移记录", 
                result.repairActions.size());
            
            return RepairResult.builder()
                .success(true)
                .message("迁移状态修复成功")
                .repairActionsExecuted(result.repairActions.size())
                .build();
                
        } catch (Exception e) {
            log.error("迁移状态修复失败", e);
            return RepairResult.builder()
                .success(false)
                .message("迁移状态修复失败: " + e.getMessage())
                .error(e.getMessage())
                .build();
        }
    }
    
    private MigrationDetail convertToMigrationDetail(MigrationInfo info) {
        return MigrationDetail.builder()
            .version(info.getVersion() != null ? info.getVersion().toString() : "")
            .description(info.getDescription())
            .type(info.getType().name())
            .script(info.getScript())
            .checksum(info.getChecksum())
            .installedOn(info.getInstalledOn())
            .installedBy(info.getInstalledBy())
            .executionTime(info.getExecutionTime())
            .state(info.getState().getDisplayName())
            .build();
    }
}
/* [AI-BLOCK-END] */
```

### 迁移脚本示例和最佳实践
```sql
-- [AI-BLOCK-START] - 生成工具: 数据迁移流程 v2.0
-- V1.0.1__Create_users_table.sql
-- 创建用户表
-- 作者: 开发团队
-- 创建时间: 2024-01-01
-- 说明: 初始化用户表结构，包含基础字段和索引

-- 创建用户表
CREATE TABLE users (
    id BIGINT PRIMARY KEY AUTO_INCREMENT COMMENT '用户ID',
    username VARCHAR(50) NOT NULL UNIQUE COMMENT '用户名',
    email VARCHAR(100) NOT NULL UNIQUE COMMENT '邮箱',
    password_hash VARCHAR(255) NOT NULL COMMENT '密码哈希',
    name VARCHAR(50) COMMENT '真实姓名',
    phone VARCHAR(20) COMMENT '手机号',
    status ENUM('PENDING', 'ACTIVE', 'LOCKED', 'DELETED') NOT NULL DEFAULT 'PENDING' COMMENT '用户状态',
    avatar_url VARCHAR(500) COMMENT '头像URL',
    birth_date DATE COMMENT '出生日期',
    profile JSON COMMENT '用户资料',
    last_login_time TIMESTAMP NULL COMMENT '最后登录时间',
    last_login_ip VARCHAR(45) COMMENT '最后登录IP',
    create_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
    update_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
    created_by VARCHAR(50) COMMENT '创建人',
    updated_by VARCHAR(50) COMMENT '更新人',
    version BIGINT NOT NULL DEFAULT 0 COMMENT '版本号',
    deleted BOOLEAN NOT NULL DEFAULT FALSE COMMENT '软删除标记'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='用户表';

-- 创建索引
CREATE INDEX idx_users_username ON users(username);
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_users_status_deleted ON users(status, deleted);
CREATE INDEX idx_users_create_time ON users(create_time);
CREATE INDEX idx_users_last_login_time ON users(last_login_time);

-- 插入系统管理员账户
INSERT INTO users (username, email, password_hash, name, status, created_by)
VALUES ('admin', 'admin@company.com', '$2a$12$placeholder_hash', '系统管理员', 'ACTIVE', 'system');

-- V1.0.2__Create_roles_table.sql
-- 创建角色表和用户角色关联表
-- 作者: 开发团队
-- 创建时间: 2024-01-02
-- 说明: 建立RBAC权限模型的基础表结构

-- 创建角色表
CREATE TABLE roles (
    id BIGINT PRIMARY KEY AUTO_INCREMENT COMMENT '角色ID',
    name VARCHAR(50) NOT NULL UNIQUE COMMENT '角色名称',
    display_name VARCHAR(100) NOT NULL COMMENT '显示名称',
    description VARCHAR(200) COMMENT '角色描述',
    permissions JSON COMMENT '权限列表',
    create_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
    update_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
    created_by VARCHAR(50) COMMENT '创建人',
    updated_by VARCHAR(50) COMMENT '更新人',
    version BIGINT NOT NULL DEFAULT 0 COMMENT '版本号',
    deleted BOOLEAN NOT NULL DEFAULT FALSE COMMENT '软删除标记'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='角色表';

-- 创建用户角色关联表
CREATE TABLE user_roles (
    id BIGINT PRIMARY KEY AUTO_INCREMENT COMMENT '关联ID',
    user_id BIGINT NOT NULL COMMENT '用户ID',
    role_id BIGINT NOT NULL COMMENT '角色ID',
    create_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
    created_by VARCHAR(50) COMMENT '创建人',
    UNIQUE KEY uk_user_roles_user_role (user_id, role_id),
    CONSTRAINT fk_user_roles_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    CONSTRAINT fk_user_roles_role FOREIGN KEY (role_id) REFERENCES roles(id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='用户角色关联表';

-- 创建索引
CREATE INDEX idx_roles_name ON roles(name);
CREATE INDEX idx_user_roles_user_id ON user_roles(user_id);
CREATE INDEX idx_user_roles_role_id ON user_roles(role_id);

-- 插入默认角色
INSERT INTO roles (name, display_name, description, created_by) VALUES
('ADMIN', '系统管理员', '系统管理员，拥有所有权限', 'system'),
('USER', '普通用户', '普通用户，基础权限', 'system'),
('MANAGER', '业务管理员', '业务管理员，业务相关权限', 'system');

-- 给admin用户分配ADMIN角色
INSERT INTO user_roles (user_id, role_id, created_by)
SELECT u.id, r.id, 'system'
FROM users u, roles r
WHERE u.username = 'admin' AND r.name = 'ADMIN';

-- V1.1.0__Add_user_settings_table.sql
-- 添加用户设置表
-- 作者: 开发团队
-- 创建时间: 2024-01-15
-- 说明: 添加用户个性化设置功能

-- 创建用户设置表
CREATE TABLE user_settings (
    id BIGINT PRIMARY KEY AUTO_INCREMENT COMMENT '设置ID',
    user_id BIGINT NOT NULL UNIQUE COMMENT '用户ID',
    language VARCHAR(10) NOT NULL DEFAULT 'zh_CN' COMMENT '语言设置',
    timezone VARCHAR(50) NOT NULL DEFAULT 'Asia/Shanghai' COMMENT '时区设置',
    theme VARCHAR(20) NOT NULL DEFAULT 'light' COMMENT '主题设置',
    notification_email BOOLEAN NOT NULL DEFAULT TRUE COMMENT '邮件通知开关',
    notification_sms BOOLEAN NOT NULL DEFAULT TRUE COMMENT '短信通知开关',
    notification_push BOOLEAN NOT NULL DEFAULT TRUE COMMENT '推送通知开关',
    privacy_profile_visible BOOLEAN NOT NULL DEFAULT TRUE COMMENT '资料可见性',
    privacy_activity_visible BOOLEAN NOT NULL DEFAULT TRUE COMMENT '活动可见性',
    settings_json JSON COMMENT '其他设置JSON',
    create_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
    update_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
    created_by VARCHAR(50) COMMENT '创建人',
    updated_by VARCHAR(50) COMMENT '更新人',
    version BIGINT NOT NULL DEFAULT 0 COMMENT '版本号',
    CONSTRAINT fk_user_settings_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='用户设置表';

-- 为所有现有用户创建默认设置
INSERT INTO user_settings (user_id, created_by)
SELECT id, 'system' FROM users WHERE deleted = FALSE;

-- V1.2.0__Modify_users_add_phone_verified.sql
-- 修改用户表，添加手机验证字段
-- 作者: 开发团队
-- 创建时间: 2024-02-01
-- 说明: 增强用户安全性，添加手机号验证功能

-- 添加手机验证字段
ALTER TABLE users 
ADD COLUMN phone_verified BOOLEAN NOT NULL DEFAULT FALSE COMMENT '手机号是否已验证' AFTER phone,
ADD COLUMN phone_verify_time TIMESTAMP NULL COMMENT '手机号验证时间' AFTER phone_verified,
ADD COLUMN email_verified BOOLEAN NOT NULL DEFAULT FALSE COMMENT '邮箱是否已验证' AFTER email,
ADD COLUMN email_verify_time TIMESTAMP NULL COMMENT '邮箱验证时间' AFTER email_verified;

-- 为现有admin用户设置为已验证
UPDATE users 
SET email_verified = TRUE, 
    email_verify_time = CURRENT_TIMESTAMP,
    updated_by = 'system'
WHERE username = 'admin';

-- 添加索引
CREATE INDEX idx_users_phone_verified ON users(phone_verified);
CREATE INDEX idx_users_email_verified ON users(email_verified);

-- V2.0.0__Create_orders_table.sql
-- 创建订单相关表
-- 作者: 开发团队
-- 创建时间: 2024-03-01
-- 说明: 添加订单管理功能，支持完整的订单流程

-- 创建订单表
CREATE TABLE orders (
    id BIGINT PRIMARY KEY AUTO_INCREMENT COMMENT '订单ID',
    order_no VARCHAR(32) NOT NULL UNIQUE COMMENT '订单号',
    user_id BIGINT NOT NULL COMMENT '用户ID',
    status ENUM('PENDING', 'CONFIRMED', 'PAID', 'SHIPPED', 'COMPLETED', 'CANCELLED') 
           NOT NULL DEFAULT 'PENDING' COMMENT '订单状态',
    total_amount DECIMAL(10,2) NOT NULL COMMENT '订单总金额',
    payment_method ENUM('ALIPAY', 'WECHAT', 'BANK_CARD', 'CREDIT_CARD') COMMENT '支付方式',
    payment_time TIMESTAMP NULL COMMENT '支付时间',
    
    -- 收货地址信息
    shipping_province VARCHAR(50) COMMENT '收货省份',
    shipping_city VARCHAR(50) COMMENT '收货城市',
    shipping_district VARCHAR(50) COMMENT '收货区县',
    shipping_detail_address VARCHAR(200) COMMENT '详细地址',
    shipping_postal_code VARCHAR(10) COMMENT '邮政编码',
    shipping_contact_name VARCHAR(50) COMMENT '收货人姓名',
    shipping_contact_phone VARCHAR(20) COMMENT '收货人电话',
    
    -- 备注和扩展信息
    remarks TEXT COMMENT '订单备注',
    extra_info JSON COMMENT '扩展信息',
    
    -- 审计字段
    create_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
    update_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
    created_by VARCHAR(50) COMMENT '创建人',
    updated_by VARCHAR(50) COMMENT '更新人',
    version BIGINT NOT NULL DEFAULT 0 COMMENT '版本号',
    deleted BOOLEAN NOT NULL DEFAULT FALSE COMMENT '软删除标记',
    
    CONSTRAINT fk_orders_user FOREIGN KEY (user_id) REFERENCES users(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='订单表';

-- 创建订单明细表
CREATE TABLE order_items (
    id BIGINT PRIMARY KEY AUTO_INCREMENT COMMENT '明细ID',
    order_id BIGINT NOT NULL COMMENT '订单ID',
    product_id BIGINT NOT NULL COMMENT '商品ID',
    product_name VARCHAR(200) NOT NULL COMMENT '商品名称',
    product_sku VARCHAR(100) COMMENT '商品SKU',
    price DECIMAL(8,2) NOT NULL COMMENT '单价',
    quantity INT NOT NULL COMMENT '数量',
    total_price DECIMAL(10,2) NOT NULL COMMENT '小计',
    
    create_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
    
    CONSTRAINT fk_order_items_order FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='订单明细表';

-- 创建订单日志表
CREATE TABLE order_logs (
    id BIGINT PRIMARY KEY AUTO_INCREMENT COMMENT '日志ID',
    order_id BIGINT NOT NULL COMMENT '订单ID',
    action VARCHAR(50) NOT NULL COMMENT '操作动作',
    description TEXT COMMENT '操作描述',
    operator VARCHAR(50) COMMENT '操作人',
    create_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '操作时间',
    
    CONSTRAINT fk_order_logs_order FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='订单日志表';

-- 创建索引
CREATE INDEX idx_orders_user_id ON orders(user_id);
CREATE INDEX idx_orders_status ON orders(status);
CREATE INDEX idx_orders_create_time ON orders(create_time);
CREATE INDEX idx_orders_order_no ON orders(order_no);
CREATE INDEX idx_order_items_order_id ON order_items(order_id);
CREATE INDEX idx_order_items_product_id ON order_items(product_id);
CREATE INDEX idx_order_logs_order_id ON order_logs(order_id);
CREATE INDEX idx_order_logs_create_time ON order_logs(create_time);
-- [AI-BLOCK-END]
```

### 数据迁移管理控制器
```java
/* [AI-BLOCK-START] - 生成工具: 数据迁移流程 v2.0 */
/**
 * 数据迁移管理控制器
 * 提供迁移状态查询、执行迁移、回滚等操作的API接口
 */
@RestController
@RequestMapping("/api/admin/migrations")
@PreAuthorize("hasRole('ADMIN')")
@Slf4j
@Tag(name = "Migration Management", description = "数据库迁移管理API")
public class MigrationController {
    
    private final MigrationInfoService migrationInfoService;
    private final DataBackupService dataBackupService;
    private final MigrationAuditService migrationAuditService;
    
    public MigrationController(MigrationInfoService migrationInfoService,
                              DataBackupService dataBackupService,
                              MigrationAuditService migrationAuditService) {
        this.migrationInfoService = migrationInfoService;
        this.dataBackupService = dataBackupService;
        this.migrationAuditService = migrationAuditService;
    }
    
    /**
     * 获取迁移状态信息
     */
    @GetMapping("/status")
    @Operation(summary = "获取迁移状态", description = "查询当前数据库迁移状态和历史记录")
    public ResponseEntity<ApiResponse<MigrationStatusInfo>> getMigrationStatus() {
        try {
            MigrationStatusInfo status = migrationInfoService.getMigrationStatus();
            return ResponseEntity.ok(ApiResponse.success(status));
            
        } catch (Exception e) {
            log.error("获取迁移状态失败", e);
            return ResponseEntity.internalServerError()
                .body(ApiResponse.error(500, "获取迁移状态失败: " + e.getMessage()));
        }
    }
    
    /**
     * 验证迁移脚本
     */
    @PostMapping("/validate")
    @Operation(summary = "验证迁移", description = "验证待执行的迁移脚本是否正确")
    public ResponseEntity<ApiResponse<ValidationResult>> validateMigrations() {
        try {
            log.info("开始验证迁移脚本, 操作人: {}", getCurrentUsername());
            
            ValidationResult result = migrationInfoService.validateMigrations();
            
            // 记录审计日志
            migrationAuditService.recordAuditLog(
                MigrationAuditLog.builder()
                    .action("VALIDATE")
                    .result(result.isValid() ? "SUCCESS" : "FAILURE")
                    .message(result.getMessage())
                    .operator(getCurrentUsername())
                    .build()
            );
            
            return ResponseEntity.ok(ApiResponse.success(result));
            
        } catch (Exception e) {
            log.error("验证迁移失败", e);
            
            migrationAuditService.recordAuditLog(
                MigrationAuditLog.builder()
                    .action("VALIDATE")
                    .result("ERROR")
                    .message("验证失败: " + e.getMessage())
                    .operator(getCurrentUsername())
                    .build()
            );
            
            return ResponseEntity.internalServerError()
                .body(ApiResponse.error(500, "验证迁移失败: " + e.getMessage()));
        }
    }
    
    /**
     * 执行数据库迁移
     */
    @PostMapping("/execute")
    @Operation(summary = "执行迁移", description = "执行待处理的数据库迁移")
    public ResponseEntity<ApiResponse<MigrationExecutionResult>> executeMigrations(
            @RequestBody @Valid ExecuteMigrationRequest request) {
        
        try {
            String operator = getCurrentUsername();
            log.info("开始执行数据库迁移, 操作人: {}, 备份: {}", operator, request.isCreateBackup());
            
            // 检查是否有待执行的迁移
            MigrationStatusInfo status = migrationInfoService.getMigrationStatus();
            if (status.getPendingCount() == 0) {
                return ResponseEntity.badRequest()
                    .body(ApiResponse.error(400, "没有待执行的迁移"));
            }
            
            String backupId = null;
            if (request.isCreateBackup()) {
                // 创建数据备份
                log.info("创建数据备份...");
                BackupResult backupResult = dataBackupService.createBackup(
                    "migration_backup_" + System.currentTimeMillis());
                
                if (!backupResult.isSuccess()) {
                    return ResponseEntity.internalServerError()
                        .body(ApiResponse.error(500, "备份创建失败: " + backupResult.getMessage()));
                }
                
                backupId = backupResult.getBackupId();
                log.info("备份创建成功: {}", backupId);
            }
            
            // 执行迁移
            MigrationResult migrationResult = migrationInfoService.executeMigration();
            
            // 构建执行结果
            MigrationExecutionResult executionResult = MigrationExecutionResult.builder()
                .migrationResult(migrationResult)
                .backupId(backupId)
                .operator(operator)
                .executeTime(LocalDateTime.now())
                .build();
            
            // 记录审计日志
            migrationAuditService.recordAuditLog(
                MigrationAuditLog.builder()
                    .action("EXECUTE")
                    .result(migrationResult.isSuccess() ? "SUCCESS" : "FAILURE")
                    .message(migrationResult.getMessage())
                    .migrationsExecuted(migrationResult.getMigrationsExecuted())
                    .backupId(backupId)
                    .operator(operator)
                    .build()
            );
            
            if (migrationResult.isSuccess()) {
                log.info("数据库迁移执行成功: 执行了 {} 个迁移", migrationResult.getMigrationsExecuted());
                return ResponseEntity.ok(ApiResponse.success(executionResult, "迁移执行成功"));
            } else {
                log.error("数据库迁移执行失败: {}", migrationResult.getMessage());
                return ResponseEntity.internalServerError()
                    .body(ApiResponse.error(500, "迁移执行失败: " + migrationResult.getMessage()));
            }
            
        } catch (Exception e) {
            log.error("执行迁移时发生异常", e);
            
            migrationAuditService.recordAuditLog(
                MigrationAuditLog.builder()
                    .action("EXECUTE")
                    .result("ERROR")
                    .message("执行异常: " + e.getMessage())
                    .operator(getCurrentUsername())
                    .build()
            );
            
            return ResponseEntity.internalServerError()
                .body(ApiResponse.error(500, "执行迁移时发生异常: " + e.getMessage()));
        }
    }
    
    /**
     * 修复迁移状态
     */
    @PostMapping("/repair")
    @Operation(summary = "修复迁移状态", description = "修复失败的迁移状态")
    public ResponseEntity<ApiResponse<RepairResult>> repairMigrations() {
        try {
            String operator = getCurrentUsername();
            log.info("开始修复迁移状态, 操作人: {}", operator);
            
            RepairResult result = migrationInfoService.repairMigrations();
            
            // 记录审计日志
            migrationAuditService.recordAuditLog(
                MigrationAuditLog.builder()
                    .action("REPAIR")
                    .result(result.isSuccess() ? "SUCCESS" : "FAILURE")
                    .message(result.getMessage())
                    .operator(operator)
                    .build()
            );
            
            return ResponseEntity.ok(ApiResponse.success(result));
            
        } catch (Exception e) {
            log.error("修复迁移状态失败", e);
            
            migrationAuditService.recordAuditLog(
                MigrationAuditLog.builder()
                    .action("REPAIR")
                    .result("ERROR")
                    .message("修复失败: " + e.getMessage())
                    .operator(getCurrentUsername())
                    .build()
            );
            
            return ResponseEntity.internalServerError()
                .body(ApiResponse.error(500, "修复迁移状态失败: " + e.getMessage()));
        }
    }
    
    /**
     * 获取迁移审计日志
     */
    @GetMapping("/audit-logs")
    @Operation(summary = "获取审计日志", description = "查询数据库迁移的审计日志")
    public ResponseEntity<ApiResponse<PageResponse<MigrationAuditLog>>> getAuditLogs(
            @RequestParam(value = "page", defaultValue = "0") int page,
            @RequestParam(value = "size", defaultValue = "20") int size,
            @RequestParam(value = "action", required = false) String action,
            @RequestParam(value = "operator", required = false) String operator,
            @RequestParam(value = "startTime", required = false) 
            @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime startTime,
            @RequestParam(value = "endTime", required = false) 
            @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime endTime) {
        
        try {
            Pageable pageable = PageRequest.of(page, size, Sort.by(Sort.Direction.DESC, "createTime"));
            
            MigrationAuditCriteria criteria = MigrationAuditCriteria.builder()
                .action(action)
                .operator(operator)
                .startTime(startTime)
                .endTime(endTime)
                .build();
            
            PageResponse<MigrationAuditLog> auditLogs = migrationAuditService.findAuditLogs(pageable, criteria);
            
            return ResponseEntity.ok(ApiResponse.success(auditLogs));
            
        } catch (Exception e) {
            log.error("获取审计日志失败", e);
            return ResponseEntity.internalServerError()
                .body(ApiResponse.error(500, "获取审计日志失败: " + e.getMessage()));
        }
    }
    
    /**
     * 获取数据备份列表
     */
    @GetMapping("/backups")
    @Operation(summary = "获取备份列表", description = "查询数据库备份列表")
    public ResponseEntity<ApiResponse<List<BackupInfo>>> getBackups() {
        try {
            List<BackupInfo> backups = dataBackupService.listBackups();
            return ResponseEntity.ok(ApiResponse.success(backups));
            
        } catch (Exception e) {
            log.error("获取备份列表失败", e);
            return ResponseEntity.internalServerError()
                .body(ApiResponse.error(500, "获取备份列表失败: " + e.getMessage()));
        }
    }
    
    /**
     * 创建数据备份
     */
    @PostMapping("/backups")
    @Operation(summary = "创建数据备份", description = "手动创建数据库备份")
    public ResponseEntity<ApiResponse<BackupResult>> createBackup(
            @RequestBody @Valid CreateBackupRequest request) {
        
        try {
            String operator = getCurrentUsername();
            log.info("开始创建数据备份, 操作人: {}, 备份名称: {}", operator, request.getName());
            
            BackupResult result = dataBackupService.createBackup(request.getName());
            
            // 记录审计日志
            migrationAuditService.recordAuditLog(
                MigrationAuditLog.builder()
                    .action("BACKUP")
                    .result(result.isSuccess() ? "SUCCESS" : "FAILURE")
                    .message(result.getMessage())
                    .backupId(result.getBackupId())
                    .operator(operator)
                    .build()
            );
            
            return ResponseEntity.ok(ApiResponse.success(result));
            
        } catch (Exception e) {
            log.error("创建数据备份失败", e);
            return ResponseEntity.internalServerError()
                .body(ApiResponse.error(500, "创建数据备份失败: " + e.getMessage()));
        }
    }
    
    private String getCurrentUsername() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        return authentication != null ? authentication.getName() : "system";
    }
}

/**
 * 执行迁移请求
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class ExecuteMigrationRequest {
    
    /**
     * 是否创建备份
     */
    @NotNull(message = "备份选项不能为空")
    private Boolean createBackup = true;
    
    /**
     * 备份名称
     */
    private String backupName;
    
    /**
     * 确认执行
     */
    @NotNull(message = "必须确认执行")
    @AssertTrue(message = "必须确认执行迁移")
    private Boolean confirmed;
    
    public boolean isCreateBackup() {
        return Boolean.TRUE.equals(createBackup);
    }
}

/**
 * 创建备份请求
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class CreateBackupRequest {
    
    @NotBlank(message = "备份名称不能为空")
    @Size(max = 100, message = "备份名称长度不能超过100字符")
    private String name;
}
/* [AI-BLOCK-END] */
```

---

*此数据迁移流程规范建立了完整的数据库版本管理和迁移执行体系，确保数据库变更的安全性和可追溯性*
description:
globs:
alwaysApply: false
---
