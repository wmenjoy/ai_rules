---
description: 
globs: 
alwaysApply: false
---
# 规则：从PRD生成任务列表

## 目标
指导AI助手基于现有产品需求文档（PRD），创建详细的、循序渐进的Markdown格式任务列表。任务列表应指导开发人员完成实现。

## 输出
- **格式：** Markdown (`.md`)
- **位置：** `/tasks/`
- **文件名：** `tasks-[prd-文件名].md`（例如：`tasks-prd-user-profile-editing.md`）

## 流程
1. **接收PRD引用：** 用户向AI指出特定的PRD文件
2. **分析PRD：** AI读取并分析指定PRD的功能要求、用户故事和其他部分。
3. **阶段1：生成父任务：** 基于PRD分析，创建文件并生成实现功能所需的主要高级任务。使用你的判断来决定使用多少个高级任务。以指定格式向用户展示这些任务（暂时不包含子任务）。告知用户："我已基于PRD生成了高级任务。准备生成子任务了吗？回复'Go'以继续。"
4. **等待确认：** 暂停并等待用户回复"Go"。
5. **阶段2：生成子任务：** 用户确认后，将每个父任务分解为完成父任务所需的更小的、可执行的子任务。确保子任务在逻辑上从父任务衍生，并涵盖PRD暗示的实现细节。
6. **识别相关文件：** 基于任务和PRD，识别需要创建或修改的潜在文件。在`相关文件`部分列出这些文件，如果适用的话包括相应的测试文件。
7. **生成最终输出：** 将父任务、子任务、相关文件和注释组合成最终的Markdown结构。
8. **保存任务列表：** 将生成的文档保存在`/tasks/`目录中，文件名为`tasks-[prd-文件名].md`，其中`[prd-文件名]`与输入PRD文件的基本名称匹配（例如，如果输入是`prd-user-profile-editing.md`，输出是`tasks-prd-user-profile-editing.md`）。

## 输出格式
生成的任务列表_必须_遵循以下结构：

```markdown
## 相关文件

- `path/to/potential/file1.ts` - 简要描述为什么这个文件相关（例如：包含此功能的主要组件）。
- `path/to/file1.test.ts` - `file1.ts`的单元测试。
- `path/to/another/file.tsx` - 简要描述（例如：数据提交的API路由处理器）。
- `path/to/another/file.test.tsx` - `another/file.tsx`的单元测试。
- `lib/utils/helpers.ts` - 简要描述（例如：计算所需的实用函数）。
- `lib/utils/helpers.test.ts` - `helpers.ts`的单元测试。

### 注释

- 单元测试通常应放置在它们测试的代码文件旁边（例如，`MyComponent.tsx`和`MyComponent.test.tsx`在同一目录中）。
- 使用`npx jest [可选/测试/文件/路径]`来运行测试。不指定路径时执行Jest配置找到的所有测试。

## 任务

- [ ] 1.0 父任务标题
  - [ ] 1.1 [子任务描述 1.1]
  - [ ] 1.2 [子任务描述 1.2]
- [ ] 2.0 父任务标题
  - [ ] 2.1 [子任务描述 2.1]
- [ ] 3.0 父任务标题（如果纯粹是结构性或配置性的，可能不需要子任务）
```

## 交互模型
该流程明确要求在生成父任务后暂停，获得用户确认（"Go"），然后再继续生成详细的子任务。这确保了在深入细节之前，高级计划与用户期望保持一致。

## 目标受众
假设任务列表的主要读者是将实现该功能的**初级开发人员**。