{
  "goals": {
    "1745802302998": {
      "id": "1745802302998",
      "description": "Design a comprehensive UI/UX design guide for a React + TypeScript + Tailwind CSS project with detailed specifications for design tokens, components, and patterns",
      "createdAt": "2025-04-28T01:05:02.998Z"
    }
  },
  "plans": {
    "1745802302998": {
      "goalId": "1745802302998",
      "todos": [
        {
          "id": "1745802322998",
          "title": "Define Color System and Tailwind Configuration",
          "description": "Create a comprehensive color system including:\n- Primary colors (with light/dark variants)\n- Secondary colors\n- Accent colors\n- Neutral/gray scale\n- Semantic colors (success, warning, error, info)\n- Background colors\n- Text colors\n\nFor each color:\n- Define hex values\n- Create Tailwind class mapping\n- Document usage guidelines\n- Ensure WCAG 2.1 AA compliance for text/background combinations\n\nImplement in Tailwind config:\n```typescript\n// Example Tailwind config extension\nmodule.exports = {\n  theme: {\n    extend: {\n      colors: {\n        primary: {\n          50: '#f0f9ff',\n          100: '#e0f2fe',\n          200: '#bae6fd',\n          300: '#7dd3fc',\n          400: '#38bdf8',\n          500: '#0ea5e9',\n          600: '#0284c7',\n          700: '#0369a1',\n          800: '#075985',\n          900: '#0c4a6e',\n          950: '#082f49',\n        },\n        // Additional color definitions\n      }\n    }\n  }\n}\n```",
          "complexity": 7,
          "isComplete": false,
          "createdAt": "2025-04-28T01:05:22.998Z",
          "updatedAt": "2025-04-28T01:05:22.998Z"
        },
        {
          "id": "1745802336705",
          "title": "Establish Typography System",
          "description": "Define a complete typography system:\n- Font families (primary, secondary, monospace)\n- Font weights (light, regular, medium, semibold, bold)\n- Font sizes with scale (xs, sm, base, lg, xl, 2xl, etc.)\n- Line heights for different contexts\n- Letter spacing requirements\n- Text color usage\n- Heading styles (h1-h6)\n- Paragraph styles\n- Special text elements (quotes, code, etc.)\n\nImplement in Tailwind config and create TypeScript utilities:\n```typescript\n// Example Tailwind typography configuration\nmodule.exports = {\n  theme: {\n    extend: {\n      fontFamily: {\n        sans: ['\"Inter\"', 'sans-serif'],\n        display: ['\"Lexend\"', 'sans-serif'],\n        mono: ['\"Fira Code\"', 'monospace'],\n      },\n      fontSize: {\n        xs: ['0.75rem', { lineHeight: '1rem' }],\n        sm: ['0.875rem', { lineHeight: '1.25rem' }],\n        base: ['1rem', { lineHeight: '1.5rem' }],\n        lg: ['1.125rem', { lineHeight: '1.75rem' }],\n        xl: ['1.25rem', { lineHeight: '1.75rem' }],\n        '2xl': ['1.5rem', { lineHeight: '2rem' }],\n        '3xl': ['1.875rem', { lineHeight: '2.25rem' }],\n        '4xl': ['2.25rem', { lineHeight: '2.5rem' }],\n        '5xl': ['3rem', { lineHeight: '1' }],\n        '6xl': ['3.75rem', { lineHeight: '1' }],\n      },\n    }\n  }\n}\n\n// TypeScript utility for typography\ntype TypographyVariant = \n  | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'\n  | 'body1' | 'body2' | 'caption' | 'overline';\n\nconst getTypographyClasses = (variant: TypographyVariant): string => {\n  switch (variant) {\n    case 'h1':\n      return 'font-display text-4xl font-bold text-gray-900 dark:text-white';\n    case 'h2':\n      return 'font-display text-3xl font-semibold text-gray-900 dark:text-white';\n    // Additional variants...\n  }\n};\n```",
          "complexity": 6,
          "isComplete": false,
          "createdAt": "2025-04-28T01:05:36.705Z",
          "updatedAt": "2025-04-28T01:05:36.705Z"
        },
        {
          "id": "1745802376668",
          "title": "Design Button Component System",
          "description": "Create a comprehensive button component system:\n\n1. Button Variants:\n   - Primary\n   - Secondary\n   - Outline\n   - Ghost/Text\n   - Destructive\n   - Success\n\n2. Button Sizes:\n   - XS (icon buttons)\n   - Small\n   - Medium (default)\n   - Large\n\n3. Button States:\n   - Default\n   - Hover\n   - Active/Pressed\n   - Focus\n   - Disabled\n   - Loading\n\n4. TypeScript Interface:\n```typescript\ntype ButtonVariant = 'primary' | 'secondary' | 'outline' | 'ghost' | 'destructive' | 'success';\ntype ButtonSize = 'xs' | 'sm' | 'md' | 'lg';\n\ninterface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  variant?: ButtonVariant;\n  size?: ButtonSize;\n  isLoading?: boolean;\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n  fullWidth?: boolean;\n}\n```\n\n5. Implementation with Tailwind:\n```tsx\n// Button.tsx\nimport React from 'react';\nimport { Spinner } from './Spinner';\nimport { classNames } from '../utils';\n\nexport const Button: React.FC<ButtonProps> = ({ \n  children,\n  variant = 'primary',\n  size = 'md',\n  isLoading = false,\n  leftIcon,\n  rightIcon,\n  fullWidth = false,\n  disabled,\n  className,\n  ...props\n}) => {\n  // Base button classes\n  const baseClasses = 'inline-flex items-center justify-center font-medium rounded transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2';\n  \n  // Size classes\n  const sizeClasses = {\n    xs: 'text-xs px-2.5 py-1.5',\n    sm: 'text-sm px-3 py-2',\n    md: 'text-sm px-4 py-2',\n    lg: 'text-base px-6 py-3',\n  };\n  \n  // Variant classes\n  const variantClasses = {\n    primary: 'bg-primary-600 text-white hover:bg-primary-700 active:bg-primary-800 focus:ring-primary-500 disabled:bg-primary-300',\n    secondary: 'bg-gray-600 text-white hover:bg-gray-700 active:bg-gray-800 focus:ring-gray-500 disabled:bg-gray-300',\n    outline: 'border border-gray-300 text-gray-700 bg-transparent hover:bg-gray-50 active:bg-gray-100 focus:ring-gray-500 disabled:text-gray-300',\n    ghost: 'text-gray-700 bg-transparent hover:bg-gray-100 active:bg-gray-200 focus:ring-gray-500 disabled:text-gray-300',\n    destructive: 'bg-red-600 text-white hover:bg-red-700 active:bg-red-800 focus:ring-red-500 disabled:bg-red-300',\n    success: 'bg-green-600 text-white hover:bg-green-700 active:bg-green-800 focus:ring-green-500 disabled:bg-green-300',\n  };\n  \n  // Width class\n  const widthClass = fullWidth ? 'w-full' : '';\n  \n  return (\n    <button\n      className={classNames(\n        baseClasses,\n        sizeClasses[size],\n        variantClasses[variant],\n        widthClass,\n        isLoading && 'opacity-90 cursor-wait',\n        disabled && 'cursor-not-allowed opacity-60',\n        className\n      )}\n      disabled={disabled || isLoading}\n      {...props}\n    >\n      {isLoading && (\n        <Spinner className=\"mr-2 h-4 w-4\" />\n      )}\n      {!isLoading && leftIcon && (\n        <span className=\"mr-2\">{leftIcon}</span>\n      )}\n      {children}\n      {!isLoading && rightIcon && (\n        <span className=\"ml-2\">{rightIcon}</span>\n      )}\n    </button>\n  );\n};\n```\n\n6. Usage Documentation:\n   - Example usage scenarios\n   - Best practices (when to use each variant)\n   - Accessibility considerations (contrast, focus states)\n   - Responsive behavior",
          "complexity": 8,
          "isComplete": false,
          "createdAt": "2025-04-28T01:06:16.668Z",
          "updatedAt": "2025-04-28T01:06:16.668Z"
        },
        {
          "id": "1745802398583",
          "title": "Develop Icon System",
          "description": "Create a comprehensive icon system:\n\n1. Icon Library Selection:\n   - Choose an icon library (e.g., Heroicons, Phosphor Icons, Lucide)\n   - Document icon naming conventions\n   - Establish icon import patterns\n\n2. Icon Sizes:\n   - XS (12px)\n   - Small (16px)\n   - Medium (20px)\n   - Large (24px)\n   - XL (32px)\n\n3. Icon Colors:\n   - Inherit from text color\n   - Specific semantic colors\n   - Color inheritance rules\n\n4. TypeScript Interface:\n```typescript\ntype IconSize = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n\ninterface IconProps {\n  size?: IconSize;\n  color?: string;\n  className?: string;\n  'aria-hidden'?: boolean;\n  'aria-label'?: string;\n}\n```\n\n5. Implementation with TypeScript and Tailwind:\n```tsx\n// Icon.tsx\nimport React from 'react';\nimport { classNames } from '../utils';\n\nexport const iconSizes = {\n  xs: 'w-3 h-3',\n  sm: 'w-4 h-4',\n  md: 'w-5 h-5',\n  lg: 'w-6 h-6', \n  xl: 'w-8 h-8'\n};\n\nexport const Icon: React.FC<IconProps> = ({ \n  size = 'md',\n  color,\n  className,\n  'aria-hidden': ariaHidden = true,\n  'aria-label': ariaLabel,\n  children \n}) => {\n  const colorClass = color ? `text-${color}` : '';\n  \n  const accessibilityProps = ariaLabel\n    ? { 'aria-label': ariaLabel, 'aria-hidden': false }\n    : { 'aria-hidden': ariaHidden };\n  \n  return (\n    <svg\n      className={classNames(\n        'inline-block flex-shrink-0',\n        iconSizes[size],\n        colorClass,\n        className\n      )}\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      stroke=\"currentColor\"\n      {...accessibilityProps}\n    >\n      {children}\n    </svg>\n  );\n};\n\n// Example usage with specific icon\nexport const CheckIcon: React.FC<IconProps> = (props) => (\n  <Icon {...props}>\n    <path \n      strokeLinecap=\"round\" \n      strokeLinejoin=\"round\" \n      strokeWidth={2} \n      d=\"M5 13l4 4L19 7\" \n    />\n  </Icon>\n);\n```\n\n6. Icon Usage Guidelines:\n   - When to use icons\n   - Icon + text combinations\n   - Icon density recommendations\n   - Accessibility requirements for icon-only buttons\n   - Consistency guidelines\n\n7. Icon Management:\n   - Directory structure for custom icons\n   - SVG optimization process\n   - Icon component generation workflow\n   - Icon searching/browsing in documentation",
          "complexity": 7,
          "isComplete": false,
          "createdAt": "2025-04-28T01:06:38.583Z",
          "updatedAt": "2025-04-28T01:06:38.583Z"
        },
        {
          "id": "1745802487963",
          "title": "Design Form Components",
          "description": "Create a comprehensive form component system:\n\n1. Input Fields:\n   - Text input\n   - Number input\n   - Email input\n   - Password input\n   - Text area\n   - Search input\n\n2. Selection Controls:\n   - Checkbox\n   - Radio button\n   - Toggle/Switch\n   - Select/Dropdown\n   - Multi-select\n   - Autocomplete\n\n3. Form Layout Components:\n   - Form Group\n   - Form Section\n   - Form Grid\n   - Label\n   - Help text\n   - Error message\n\n4. Form Field States:\n   - Default\n   - Focused\n   - Filled\n   - Disabled\n   - Read-only\n   - Error\n   - Success\n\n5. TypeScript Interface for Input:\n```typescript\ninterface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {\n  id: string;\n  label?: string;\n  helpText?: string;\n  error?: string;\n  isInvalid?: boolean;\n  isValid?: boolean;\n  leftAddon?: React.ReactNode;\n  rightAddon?: React.ReactNode;\n  className?: string;\n}\n```\n\n6. Implementation with Tailwind:\n```tsx\n// Input.tsx\nimport React from 'react';\nimport { classNames } from '../utils';\n\nexport const Input: React.FC<InputProps> = ({\n  id,\n  label,\n  helpText,\n  error,\n  isInvalid = false,\n  isValid = false,\n  leftAddon,\n  rightAddon,\n  className,\n  ...props\n}) => {\n  // Base input classes\n  const baseInputClasses = 'block w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-offset-0 focus:ring-opacity-50 transition-colors';\n  \n  // State-specific classes\n  const stateClasses = isInvalid\n    ? 'border-red-300 text-red-900 placeholder-red-300 focus:ring-red-500 focus:border-red-500'\n    : isValid\n      ? 'border-green-300 text-gray-900 focus:ring-green-500 focus:border-green-500'\n      : 'border-gray-300 text-gray-900 placeholder-gray-400 focus:ring-primary-500 focus:border-primary-500';\n  \n  // Disabled state\n  const disabledClasses = props.disabled ? 'bg-gray-100 cursor-not-allowed' : 'bg-white';\n  \n  // Classes for input with addons\n  const inputWithAddonClasses = leftAddon ? 'rounded-l-none' : '';\n  const inputWithRightAddonClasses = rightAddon ? 'rounded-r-none' : '';\n  \n  return (\n    <div className=\"w-full\">\n      {label && (\n        <label htmlFor={id} className=\"block text-sm font-medium text-gray-700 mb-1\">\n          {label}\n        </label>\n      )}\n      \n      <div className=\"relative flex rounded-md shadow-sm\">\n        {leftAddon && (\n          <span className=\"inline-flex items-center px-3 border border-r-0 border-gray-300 bg-gray-50 text-gray-500 rounded-l-md\">\n            {leftAddon}\n          </span>\n        )}\n        \n        <input\n          id={id}\n          className={classNames(\n            baseInputClasses,\n            stateClasses,\n            disabledClasses,\n            inputWithAddonClasses,\n            inputWithRightAddonClasses,\n            className\n          )}\n          aria-invalid={isInvalid ? 'true' : 'false'}\n          aria-describedby={helpText ? `${id}-description` : undefined}\n          {...props}\n        />\n        \n        {rightAddon && (\n          <span className=\"inline-flex items-center px-3 border border-l-0 border-gray-300 bg-gray-50 text-gray-500 rounded-r-md\">\n            {rightAddon}\n          </span>\n        )}\n      </div>\n      \n      {helpText && !error && (\n        <p id={`${id}-description`} className=\"mt-1 text-sm text-gray-500\">\n          {helpText}\n        </p>\n      )}\n      \n      {error && (\n        <p className=\"mt-1 text-sm text-red-600\">\n          {error}\n        </p>\n      )}\n    </div>\n  );\n};\n```\n\n7. Form Validation:\n   - Client-side validation patterns\n   - Form state management with React Hook Form\n   - Error handling and display\n   - Inline validation\n\n8. Form Accessibility:\n   - ARIA labels and relationships\n   - Keyboard navigation\n   - Error announcements\n   - Focus management",
          "complexity": 9,
          "isComplete": false,
          "createdAt": "2025-04-28T01:08:07.963Z",
          "updatedAt": "2025-04-28T01:08:07.963Z"
        },
        {
          "id": "1745802521916",
          "title": "Create Card and Container Components",
          "description": "Design a system of card and container components:\n\n1. Card Variants:\n   - Basic Card\n   - Interactive Card\n   - Media Card\n   - Stat Card\n   - Profile Card\n   - Action Card\n\n2. Card Properties:\n   - Border styles (width, radius, color)\n   - Shadow levels\n   - Padding/spacing system\n   - Content organization\n\n3. Container Types:\n   - Content Container\n   - Sidebar Container\n   - Full Bleed Container\n   - Grid Container\n   - Panel Container\n\n4. TypeScript Interface for Card:\n```typescript\ninterface CardProps {\n  variant?: 'basic' | 'interactive' | 'media' | 'stat' | 'profile' | 'action';\n  elevation?: 'none' | 'sm' | 'md' | 'lg';\n  isHoverable?: boolean;\n  isSelectable?: boolean;\n  isActive?: boolean;\n  onClick?: () => void;\n  className?: string;\n  children: React.ReactNode;\n}\n\ninterface CardHeaderProps {\n  title?: React.ReactNode;\n  subtitle?: React.ReactNode;\n  action?: React.ReactNode;\n  className?: string;\n  children?: React.ReactNode;\n}\n\ninterface CardBodyProps {\n  className?: string;\n  children: React.ReactNode;\n}\n\ninterface CardFooterProps {\n  className?: string;\n  children: React.ReactNode;\n}\n```\n\n5. Implementation with Tailwind:\n```tsx\n// Card.tsx\nimport React from 'react';\nimport { classNames } from '../utils';\n\nexport const cardElevations = {\n  none: '',\n  sm: 'shadow-sm',\n  md: 'shadow-md',\n  lg: 'shadow-lg',\n};\n\nexport const Card: React.FC<CardProps> = ({\n  variant = 'basic',\n  elevation = 'sm',\n  isHoverable = false,\n  isSelectable = false,\n  isActive = false,\n  onClick,\n  className,\n  children,\n}) => {\n  // Base classes\n  const baseClasses = 'bg-white rounded-lg border border-gray-200 overflow-hidden';\n  \n  // Elevation classes\n  const elevationClass = cardElevations[elevation];\n  \n  // Interactive classes\n  const interactiveClasses = onClick || isHoverable\n    ? 'transition-all duration-200 hover:shadow-md'\n    : '';\n  \n  // Selectable classes\n  const selectableClasses = isSelectable\n    ? 'cursor-pointer hover:border-primary-300'\n    : '';\n  \n  // Active state\n  const activeClasses = isActive\n    ? 'ring-2 ring-primary-500 ring-opacity-50'\n    : '';\n  \n  // Variant-specific classes\n  const variantClasses = {\n    basic: '',\n    interactive: 'cursor-pointer hover:shadow-md',\n    media: '',\n    stat: 'text-center p-6',\n    profile: 'text-center',\n    action: 'text-center p-4',\n  };\n  \n  return (\n    <div\n      className={classNames(\n        baseClasses,\n        elevationClass,\n        interactiveClasses,\n        selectableClasses,\n        activeClasses,\n        variantClasses[variant],\n        className\n      )}\n      onClick={onClick}\n      role={onClick ? 'button' : undefined}\n      tabIndex={onClick ? 0 : undefined}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport const CardHeader: React.FC<CardHeaderProps> = ({\n  title,\n  subtitle,\n  action,\n  className,\n  children,\n}) => {\n  return (\n    <div className={classNames('px-4 py-4 border-b border-gray-200', className)}>\n      {children ? (\n        children\n      ) : (\n        <div className=\"flex items-center justify-between\">\n          <div>\n            {title && (\n              <h3 className=\"text-lg font-medium text-gray-900\">\n                {title}\n              </h3>\n            )}\n            {subtitle && (\n              <p className=\"mt-1 text-sm text-gray-500\">\n                {subtitle}\n              </p>\n            )}\n          </div>\n          {action && (\n            <div className=\"ml-4\">{action}</div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport const CardBody: React.FC<CardBodyProps> = ({\n  className,\n  children,\n}) => {\n  return (\n    <div className={classNames('px-4 py-4', className)}>\n      {children}\n    </div>\n  );\n};\n\nexport const CardFooter: React.FC<CardFooterProps> = ({\n  className,\n  children,\n}) => {\n  return (\n    <div className={classNames('px-4 py-3 bg-gray-50 border-t border-gray-200', className)}>\n      {children}\n    </div>\n  );\n};\n```\n\n6. Container Implementation:\n```tsx\n// Container.tsx\nimport React from 'react';\nimport { classNames } from '../utils';\n\ninterface ContainerProps {\n  maxWidth?: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | 'full' | 'none';\n  padding?: boolean;\n  centered?: boolean;\n  className?: string;\n  children: React.ReactNode;\n}\n\nconst maxWidthClasses = {\n  xs: 'max-w-xs',\n  sm: 'max-w-sm',\n  md: 'max-w-md',\n  lg: 'max-w-lg',\n  xl: 'max-w-xl',\n  '2xl': 'max-w-2xl',\n  full: 'max-w-full',\n  none: '',\n};\n\nexport const Container: React.FC<ContainerProps> = ({\n  maxWidth = 'lg',\n  padding = true,\n  centered = true,\n  className,\n  children,\n}) => {\n  return (\n    <div\n      className={classNames(\n        maxWidthClasses[maxWidth],\n        padding ? 'px-4 sm:px-6 md:px-8' : '',\n        centered ? 'mx-auto' : '',\n        className\n      )}\n    >\n      {children}\n    </div>\n  );\n};\n```\n\n7. Usage Guidelines:\n   - Card content structure best practices\n   - When to use different card variants\n   - Container composition patterns\n   - Responsive behavior of containers\n   - Nesting guidelines\n   - Spacing recommendations",
          "complexity": 8,
          "isComplete": false,
          "createdAt": "2025-04-28T01:08:41.916Z",
          "updatedAt": "2025-04-28T01:08:41.916Z"
        },
        {
          "id": "1745802569171",
          "title": "Develop Navigation Components",
          "description": "Create a comprehensive navigation component system:\n\n1. Navigation Components:\n   - Tabs\n   - Breadcrumbs\n   - Pagination\n   - Navigation menu\n   - Dropdown menu\n   - Sidebar navigation\n   - Mobile navigation (hamburger menu)\n\n2. Tab Component:\n   - Horizontal tabs\n   - Vertical tabs\n   - Underlined tabs\n   - Contained tabs\n   - Tab with counters/badges\n\n3. TypeScript Interface for Tabs:\n```typescript\ninterface TabItemProps {\n  id: string;\n  label: React.ReactNode;\n  icon?: React.ReactNode;\n  disabled?: boolean;\n  count?: number;\n}\n\ninterface TabsProps {\n  items: TabItemProps[];\n  activeTab: string;\n  onChange: (tabId: string) => void;\n  variant?: 'underlined' | 'contained' | 'pills';\n  size?: 'sm' | 'md' | 'lg';\n  fullWidth?: boolean;\n  orientation?: 'horizontal' | 'vertical';\n  className?: string;\n}\n```\n\n4. Tabs Implementation with Tailwind:\n```tsx\n// Tabs.tsx\nimport React from 'react';\nimport { classNames } from '../utils';\n\nexport const Tabs: React.FC<TabsProps> = ({\n  items,\n  activeTab,\n  onChange,\n  variant = 'underlined',\n  size = 'md',\n  fullWidth = false,\n  orientation = 'horizontal',\n  className,\n}) => {\n  // Size classes\n  const sizeClasses = {\n    sm: 'text-sm',\n    md: 'text-base',\n    lg: 'text-lg',\n  };\n  \n  // Variant specific classes\n  const variantTabListClasses = {\n    underlined: 'border-b border-gray-200',\n    contained: 'bg-gray-100 p-1 rounded-lg',\n    pills: 'space-x-2',\n  };\n  \n  // Active tab classes based on variant\n  const getActiveTabClasses = (active: boolean) => {\n    if (!active) return '';\n    \n    switch (variant) {\n      case 'underlined':\n        return 'border-b-2 border-primary-500 text-primary-600';\n      case 'contained':\n        return 'bg-white shadow text-primary-600';\n      case 'pills':\n        return 'bg-primary-500 text-white';\n      default:\n        return '';\n    }\n  };\n  \n  // Inactive tab classes\n  const getInactiveTabClasses = () => {\n    switch (variant) {\n      case 'underlined':\n        return 'border-b-2 border-transparent hover:border-gray-300 hover:text-gray-700';\n      case 'contained':\n        return 'hover:text-gray-700';\n      case 'pills':\n        return 'hover:bg-gray-100';\n      default:\n        return '';\n    }\n  };\n  \n  // Disabled tab classes\n  const getDisabledTabClasses = () => {\n    return 'opacity-50 cursor-not-allowed';\n  };\n  \n  // Orientation specific classes\n  const orientationClasses = {\n    horizontal: 'flex-row',\n    vertical: 'flex-col',\n  };\n  \n  return (\n    <div className={classNames(orientation === 'vertical' ? 'flex' : '', className)}>\n      <div\n        className={classNames(\n          'flex',\n          orientationClasses[orientation],\n          variantTabListClasses[variant],\n          fullWidth && orientation === 'horizontal' ? 'w-full' : '',\n          orientation === 'vertical' ? 'flex-shrink-0' : ''\n        )}\n        role=\"tablist\"\n      >\n        {items.map((item) => (\n          <button\n            key={item.id}\n            role=\"tab\"\n            aria-selected={activeTab === item.id}\n            aria-controls={`${item.id}-panel`}\n            id={`${item.id}-tab`}\n            disabled={item.disabled}\n            className={classNames(\n              'px-4 py-2 font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500',\n              sizeClasses[size],\n              fullWidth && orientation === 'horizontal' ? 'flex-1' : '',\n              orientation === 'vertical' ? 'text-left' : 'text-center',\n              item.disabled ? getDisabledTabClasses() : activeTab === item.id ? getActiveTabClasses(true) : getInactiveTabClasses()\n            )}\n            onClick={() => {\n              if (!item.disabled) {\n                onChange(item.id);\n              }\n            }}\n          >\n            <div className=\"flex items-center justify-center\">\n              {item.icon && <span className=\"mr-2\">{item.icon}</span>}\n              {item.label}\n              {item.count !== undefined && (\n                <span className={classNames(\n                  'ml-2 px-2 py-0.5 text-xs font-medium rounded-full',\n                  activeTab === item.id \n                    ? variant === 'pills' ? 'bg-white bg-opacity-30 text-white' : 'bg-primary-100 text-primary-700' \n                    : 'bg-gray-100 text-gray-700'\n                )}>\n                  {item.count}\n                </span>\n              )}\n            </div>\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n};\n\n// TabPanel component\ninterface TabPanelProps {\n  id: string;\n  active: boolean;\n  children: React.ReactNode;\n}\n\nexport const TabPanel: React.FC<TabPanelProps> = ({\n  id,\n  active,\n  children,\n}) => {\n  if (!active) return null;\n  \n  return (\n    <div\n      id={`${id}-panel`}\n      role=\"tabpanel\"\n      aria-labelledby={`${id}-tab`}\n    >\n      {children}\n    </div>\n  );\n};\n```\n\n5. Breadcrumbs Implementation:\n```tsx\n// Breadcrumbs.tsx\nimport React from 'react';\nimport { classNames } from '../utils';\n\ninterface BreadcrumbItemProps {\n  label: React.ReactNode;\n  href?: string;\n  icon?: React.ReactNode;\n  isCurrent?: boolean;\n}\n\ninterface BreadcrumbsProps {\n  items: BreadcrumbItemProps[];\n  separator?: React.ReactNode;\n  className?: string;\n}\n\nexport const Breadcrumbs: React.FC<BreadcrumbsProps> = ({\n  items,\n  separator = '/',\n  className,\n}) => {\n  return (\n    <nav className={classNames('flex', className)} aria-label=\"Breadcrumb\">\n      <ol className=\"flex items-center space-x-2\">\n        {items.map((item, index) => (\n          <li key={index} className=\"flex items-center\">\n            {index > 0 && (\n              <span className=\"mx-2 text-gray-400\">{separator}</span>\n            )}\n            \n            {item.isCurrent ? (\n              <span\n                className=\"text-gray-700 font-medium\"\n                aria-current=\"page\"\n              >\n                {item.icon && <span className=\"mr-1\">{item.icon}</span>}\n                {item.label}\n              </span>\n            ) : (\n              <a\n                href={item.href}\n                className=\"text-gray-500 hover:text-gray-700 hover:underline\"\n              >\n                {item.icon && <span className=\"mr-1\">{item.icon}</span>}\n                {item.label}\n              </a>\n            )}\n          </li>\n        ))}\n      </ol>\n    </nav>\n  );\n};\n```\n\n6. Pagination Implementation:\n```tsx\n// Pagination.tsx\nimport React from 'react';\nimport { classNames } from '../utils';\n\ninterface PaginationProps {\n  currentPage: number;\n  totalPages: number;\n  onPageChange: (page: number) => void;\n  siblingCount?: number;\n  size?: 'sm' | 'md' | 'lg';\n  className?: string;\n}\n\nexport const Pagination: React.FC<PaginationProps> = ({\n  currentPage,\n  totalPages,\n  onPageChange,\n  siblingCount = 1,\n  size = 'md',\n  className,\n}) => {\n  // Generate page numbers to show\n  const getPageNumbers = () => {\n    const totalPageNumbers = siblingCount * 2 + 3; // siblings on both sides + first page + last page + current page\n    \n    // If total pages is less than total page numbers, show all pages\n    if (totalPages <= totalPageNumbers) {\n      return Array.from({ length: totalPages }, (_, i) => i + 1);\n    }\n    \n    const leftSiblingIndex = Math.max(currentPage - siblingCount, 1);\n    const rightSiblingIndex = Math.min(currentPage + siblingCount, totalPages);\n    \n    const shouldShowLeftDots = leftSiblingIndex > 2;\n    const shouldShowRightDots = rightSiblingIndex < totalPages - 1;\n    \n    // Always show first and last page\n    const firstPageIndex = 1;\n    const lastPageIndex = totalPages;\n    \n    // No dots on left side\n    if (!shouldShowLeftDots && shouldShowRightDots) {\n      const leftItemCount = 3 + 2 * siblingCount;\n      const leftRange = Array.from({ length: leftItemCount }, (_, i) => i + 1);\n      \n      return [...leftRange, '...', lastPageIndex];\n    }\n    \n    // No dots on right side\n    if (shouldShowLeftDots && !shouldShowRightDots) {\n      const rightItemCount = 3 + 2 * siblingCount;\n      const rightRange = Array.from(\n        { length: rightItemCount },\n        (_, i) => totalPages - rightItemCount + i + 1\n      );\n      \n      return [firstPageIndex, '...', ...rightRange];\n    }\n    \n    // Dots on both sides\n    if (shouldShowLeftDots && shouldShowRightDots) {\n      const middleRange = Array.from(\n        { length: rightSiblingIndex - leftSiblingIndex + 1 },\n        (_, i) => leftSiblingIndex + i\n      );\n      \n      return [firstPageIndex, '...', ...middleRange, '...', lastPageIndex];\n    }\n    \n    return [];\n  };\n  \n  const pageNumbers = getPageNumbers();\n  \n  // Size classes\n  const sizeClasses = {\n    sm: 'h-8 w-8 text-sm',\n    md: 'h-10 w-10 text-base',\n    lg: 'h-12 w-12 text-lg',\n  };\n  \n  // Button base classes\n  const buttonBaseClasses = 'inline-flex items-center justify-center rounded-md font-medium focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2';\n  \n  return (\n    <nav\n      className={classNames('flex items-center justify-center', className)}\n      aria-label=\"Pagination\"\n    >\n      {/* Previous page button */}\n      <button\n        onClick={() => onPageChange(currentPage - 1)}\n        disabled={currentPage === 1}\n        className={classNames(\n          buttonBaseClasses,\n          sizeClasses[size],\n          currentPage === 1 \n            ? 'cursor-not-allowed text-gray-300' \n            : 'text-gray-700 hover:bg-gray-100'\n        )}\n        aria-label=\"Previous Page\"\n      >\n        &lt;\n      </button>\n      \n      {/* Page numbers */}\n      <div className=\"flex items-center mx-2\">\n        {pageNumbers.map((pageNumber, index) => (\n          <React.Fragment key={index}>\n            {pageNumber === '...' ? (\n              <span className=\"mx-1 text-gray-400\">...</span>\n            ) : (\n              <button\n                onClick={() => onPageChange(Number(pageNumber))}\n                className={classNames(\n                  buttonBaseClasses,\n                  sizeClasses[size],\n                  'mx-0.5',\n                  Number(pageNumber) === currentPage\n                    ? 'bg-primary-500 text-white'\n                    : 'text-gray-700 hover:bg-gray-100'\n                )}\n                aria-current={Number(pageNumber) === currentPage ? 'page' : undefined}\n              >\n                {pageNumber}\n              </button>\n            )}\n          </React.Fragment>\n        ))}\n      </div>\n      \n      {/* Next page button */}\n      <button\n        onClick={() => onPageChange(currentPage + 1)}\n        disabled={currentPage === totalPages}\n        className={classNames(\n          buttonBaseClasses,\n          sizeClasses[size],\n          currentPage === totalPages \n            ? 'cursor-not-allowed text-gray-300' \n            : 'text-gray-700 hover:bg-gray-100'\n        )}\n        aria-label=\"Next Page\"\n      >\n        &gt;\n      </button>\n    </nav>\n  );\n};\n```\n\n7. Usage Guidelines:\n   - Navigation hierarchy best practices\n   - Mobile-friendly navigation patterns\n   - Accessibility requirements for navigation\n   - When to use different navigation components\n   - Responsive navigation behavior",
          "complexity": 8,
          "isComplete": false,
          "createdAt": "2025-04-28T01:09:29.171Z",
          "updatedAt": "2025-04-28T01:09:29.171Z"
        },
        {
          "id": "1745802639132",
          "title": "Design Feedback Components",
          "description": "Create a system of feedback components:\n\n1. Feedback Component Types:\n   - Alerts/Notifications\n   - Toast messages\n   - Modals/Dialogs\n   - Tooltips\n   - Popovers\n   - Progress indicators\n   - Loaders/Spinners\n\n2. Alert Component:\n   - Alert variants (info, success, warning, error)\n   - Dismissible alerts\n   - Alerts with actions\n   - Alert with icons\n\n3. TypeScript Interface for Alert:\n```typescript\ntype AlertVariant = 'info' | 'success' | 'warning' | 'error';\n\ninterface AlertProps {\n  variant?: AlertVariant;\n  title?: React.ReactNode;\n  icon?: React.ReactNode;\n  action?: React.ReactNode;\n  onClose?: () => void;\n  isDismissible?: boolean;\n  className?: string;\n  children: React.ReactNode;\n}\n```\n\n4. Alert Implementation with Tailwind:\n```tsx\n// Alert.tsx\nimport React from 'react';\nimport { classNames } from '../utils';\nimport { XIcon } from './icons';\n\nexport const Alert: React.FC<AlertProps> = ({\n  variant = 'info',\n  title,\n  icon,\n  action,\n  onClose,\n  isDismissible = false,\n  className,\n  children,\n}) => {\n  // Variant-specific classes\n  const variantClasses = {\n    info: 'bg-blue-50 text-blue-800',\n    success: 'bg-green-50 text-green-800',\n    warning: 'bg-yellow-50 text-yellow-800',\n    error: 'bg-red-50 text-red-800',\n  };\n  \n  // Icon colors by variant\n  const iconColors = {\n    info: 'text-blue-500',\n    success: 'text-green-500',\n    warning: 'text-yellow-500',\n    error: 'text-red-500',\n  };\n  \n  // Border colors by variant\n  const borderColors = {\n    info: 'border-blue-300',\n    success: 'border-green-300',\n    warning: 'border-yellow-300',\n    error: 'border-red-300',\n  };\n  \n  return (\n    <div\n      className={classNames(\n        'rounded-md border p-4',\n        variantClasses[variant],\n        borderColors[variant],\n        className\n      )}\n      role=\"alert\"\n    >\n      <div className=\"flex items-start\">\n        {icon && (\n          <div className={classNames('flex-shrink-0 mr-3', iconColors[variant])}>\n            {icon}\n          </div>\n        )}\n        \n        <div className=\"flex-1\">\n          {title && (\n            <h3 className=\"text-sm font-medium mb-1\">{title}</h3>\n          )}\n          \n          <div className=\"text-sm\">{children}</div>\n          \n          {action && (\n            <div className=\"mt-3\">{action}</div>\n          )}\n        </div>\n        \n        {isDismissible && onClose && (\n          <button\n            type=\"button\"\n            className={classNames(\n              'ml-auto -mx-1.5 -my-1.5 rounded-md p-1.5 inline-flex focus:outline-none focus:ring-2 focus:ring-offset-2',\n              `bg-${variant}-50 ${iconColors[variant]} hover:bg-${variant}-100 focus:ring-${variant}-500`\n            )}\n            onClick={onClose}\n            aria-label=\"Dismiss\"\n          >\n            <XIcon className=\"h-5 w-5\" />\n          </button>\n        )}\n      </div>\n    </div>\n  );\n};\n```\n\n5. Toast System:\n```tsx\n// Toast.tsx\nimport React from 'react';\nimport { classNames } from '../utils';\nimport { XIcon } from './icons';\n\n// Toast variant types\ntype ToastVariant = 'info' | 'success' | 'warning' | 'error';\n\n// Toast position options\ntype ToastPosition = \n  | 'top-left'\n  | 'top-center'\n  | 'top-right'\n  | 'bottom-left'\n  | 'bottom-center'\n  | 'bottom-right';\n\ninterface ToastProps {\n  id: string;\n  variant?: ToastVariant;\n  title?: React.ReactNode;\n  icon?: React.ReactNode;\n  autoClose?: boolean;\n  duration?: number;\n  onClose: (id: string) => void;\n  className?: string;\n  children: React.ReactNode;\n}\n\nexport const Toast: React.FC<ToastProps> = ({\n  id,\n  variant = 'info',\n  title,\n  icon,\n  autoClose = true,\n  duration = 5000, // 5 seconds\n  onClose,\n  className,\n  children,\n}) => {\n  // Variant-specific classes\n  const variantClasses = {\n    info: 'bg-blue-50 text-blue-800 border-blue-300',\n    success: 'bg-green-50 text-green-800 border-green-300',\n    warning: 'bg-yellow-50 text-yellow-800 border-yellow-300',\n    error: 'bg-red-50 text-red-800 border-red-300',\n  };\n  \n  // Icon colors by variant\n  const iconColors = {\n    info: 'text-blue-500',\n    success: 'text-green-500',\n    warning: 'text-yellow-500',\n    error: 'text-red-500',\n  };\n  \n  // Auto-close effect\n  React.useEffect(() => {\n    if (autoClose) {\n      const timer = setTimeout(() => {\n        onClose(id);\n      }, duration);\n      \n      return () => clearTimeout(timer);\n    }\n  }, [autoClose, duration, id, onClose]);\n  \n  return (\n    <div\n      className={classNames(\n        'max-w-sm w-full rounded-md border shadow-lg pointer-events-auto overflow-hidden',\n        variantClasses[variant],\n        className\n      )}\n      role=\"alert\"\n      aria-live=\"assertive\"\n    >\n      <div className=\"p-4\">\n        <div className=\"flex items-start\">\n          {icon && (\n            <div className={classNames('flex-shrink-0 mr-3', iconColors[variant])}>\n              {icon}\n            </div>\n          )}\n          \n          <div className=\"flex-1\">\n            {title && (\n              <h3 className=\"text-sm font-medium mb-1\">{title}</h3>\n            )}\n            \n            <div className=\"text-sm\">{children}</div>\n          </div>\n          \n          <button\n            type=\"button\"\n            className={classNames(\n              'ml-4 flex-shrink-0 rounded-md inline-flex text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500'\n            )}\n            onClick={() => onClose(id)}\n            aria-label=\"Close\"\n          >\n            <XIcon className=\"h-5 w-5\" />\n          </button>\n        </div>\n      </div>\n      \n      {autoClose && (\n        <div \n          className={classNames(\n            'h-1 bg-opacity-30',\n            iconColors[variant]\n          )}\n          style={{\n            animationName: 'toast-progress',\n            animationDuration: `${duration}ms`,\n            animationTimingFunction: 'linear',\n            animationFillMode: 'forwards'\n          }}\n        />\n      )}\n    </div>\n  );\n};\n\n// Toast Container component for positioning\ninterface ToastContainerProps {\n  position?: ToastPosition;\n  className?: string;\n  children: React.ReactNode;\n}\n\nexport const ToastContainer: React.FC<ToastContainerProps> = ({\n  position = 'bottom-right',\n  className,\n  children,\n}) => {\n  // Position classes\n  const positionClasses = {\n    'top-left': 'top-0 left-0',\n    'top-center': 'top-0 left-1/2 transform -translate-x-1/2',\n    'top-right': 'top-0 right-0',\n    'bottom-left': 'bottom-0 left-0',\n    'bottom-center': 'bottom-0 left-1/2 transform -translate-x-1/2',\n    'bottom-right': 'bottom-0 right-0',\n  };\n  \n  return (\n    <div\n      className={classNames(\n        'fixed z-50 p-4 flex flex-col space-y-4 pointer-events-none',\n        positionClasses[position],\n        className\n      )}\n      aria-live=\"polite\"\n    >\n      {children}\n    </div>\n  );\n};\n```\n\n6. Modal Component:\n```tsx\n// Modal.tsx\nimport React, { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport { classNames } from '../utils';\nimport { XIcon } from './icons';\n\ninterface ModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  title?: React.ReactNode;\n  size?: 'sm' | 'md' | 'lg' | 'xl' | 'full';\n  closeOnOverlayClick?: boolean;\n  closeOnEsc?: boolean;\n  initialFocus?: React.RefObject<HTMLElement>;\n  className?: string;\n  children: React.ReactNode;\n}\n\nconst modalSizes = {\n  sm: 'max-w-sm',\n  md: 'max-w-md',\n  lg: 'max-w-lg',\n  xl: 'max-w-xl',\n  full: 'max-w-full mx-4',\n};\n\nexport const Modal: React.FC<ModalProps> = ({\n  isOpen,\n  onClose,\n  title,\n  size = 'md',\n  closeOnOverlayClick = true,\n  closeOnEsc = true,\n  initialFocus,\n  className,\n  children,\n}) => {\n  // Handle ESC key press\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (closeOnEsc && isOpen && event.key === 'Escape') {\n        onClose();\n      }\n    };\n    \n    document.addEventListener('keydown', handleKeyDown);\n    \n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [closeOnEsc, isOpen, onClose]);\n  \n  // Focus trap\n  useEffect(() => {\n    if (isOpen) {\n      // Lock body scroll\n      document.body.style.overflow = 'hidden';\n      \n      // Set focus to the modal or a specified element\n      if (initialFocus?.current) {\n        initialFocus.current.focus();\n      }\n      \n      return () => {\n        document.body.style.overflow = '';\n      };\n    }\n  }, [isOpen, initialFocus]);\n  \n  if (!isOpen) return null;\n  \n  return createPortal(\n    <div className=\"fixed inset-0 z-50 overflow-y-auto\">\n      <div\n        className=\"fixed inset-0 bg-black bg-opacity-50 transition-opacity\"\n        onClick={closeOnOverlayClick ? onClose : undefined}\n        aria-hidden=\"true\"\n      />\n      \n      <div className=\"flex min-h-screen items-center justify-center p-4\">\n        <div\n          className={classNames(\n            'bg-white rounded-lg overflow-hidden shadow-xl transform transition-all w-full',\n            modalSizes[size],\n            className\n          )}\n          role=\"dialog\"\n          aria-modal=\"true\"\n          aria-labelledby=\"modal-title\"\n          onClick={(e) => e.stopPropagation()}\n        >\n          {title && (\n            <div className=\"px-6 py-4 border-b border-gray-200 flex items-center justify-between\">\n              <h3 id=\"modal-title\" className=\"font-medium text-lg text-gray-900\">\n                {title}\n              </h3>\n              <button\n                type=\"button\"\n                className=\"rounded-md text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-primary-500\"\n                onClick={onClose}\n                aria-label=\"Close\"\n              >\n                <XIcon className=\"h-6 w-6\" />\n              </button>\n            </div>\n          )}\n          \n          <div className=\"p-6\">{children}</div>\n        </div>\n      </div>\n    </div>,\n    document.body\n  );\n};\n\n// Modal footer for actions\ninterface ModalFooterProps {\n  className?: string;\n  children: React.ReactNode;\n}\n\nexport const ModalFooter: React.FC<ModalFooterProps> = ({\n  className,\n  children,\n}) => {\n  return (\n    <div\n      className={classNames(\n        'px-6 py-4 border-t border-gray-200 flex justify-end space-x-3',\n        className\n      )}\n    >\n      {children}\n    </div>\n  );\n};\n```\n\n7. Tooltip Component:\n```tsx\n// Tooltip.tsx\nimport React, { useState } from 'react';\nimport { classNames } from '../utils';\n\ntype TooltipPlacement = 'top' | 'right' | 'bottom' | 'left';\n\ninterface TooltipProps {\n  content: React.ReactNode;\n  placement?: TooltipPlacement;\n  delay?: number;\n  className?: string;\n  children: React.ReactNode;\n}\n\nexport const Tooltip: React.FC<TooltipProps> = ({\n  content,\n  placement = 'top',\n  delay = 300,\n  className,\n  children,\n}) => {\n  const [isVisible, setIsVisible] = useState(false);\n  const [timeoutId, setTimeoutId] = useState<NodeJS.Timeout | null>(null);\n  \n  const placementClasses = {\n    top: 'bottom-full left-1/2 transform -translate-x-1/2 -translate-y-2 mb-2',\n    right: 'left-full top-1/2 transform -translate-y-1/2 translate-x-2 ml-2',\n    bottom: 'top-full left-1/2 transform -translate-x-1/2 translate-y-2 mt-2',\n    left: 'right-full top-1/2 transform -translate-y-1/2 -translate-x-2 mr-2',\n  };\n  \n  const arrowClasses = {\n    top: 'top-full left-1/2 transform -translate-x-1/2 border-l-transparent border-r-transparent border-b-transparent',\n    right: 'right-full top-1/2 transform -translate-y-1/2 border-t-transparent border-b-transparent border-r-transparent',\n    bottom: 'bottom-full left-1/2 transform -translate-x-1/2 border-l-transparent border-r-transparent border-t-transparent',\n    left: 'left-full top-1/2 transform -translate-y-1/2 border-t-transparent border-b-transparent border-l-transparent',\n  };\n  \n  const showTooltip = () => {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n    \n    const id = setTimeout(() => {\n      setIsVisible(true);\n    }, delay);\n    \n    setTimeoutId(id);\n  };\n  \n  const hideTooltip = () => {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n      setTimeoutId(null);\n    }\n    \n    setIsVisible(false);\n  };\n  \n  return (\n    <div\n      className=\"relative inline-block\"\n      onMouseEnter={showTooltip}\n      onMouseLeave={hideTooltip}\n      onFocus={showTooltip}\n      onBlur={hideTooltip}\n    >\n      <div\n        className={classNames(\n          'absolute z-50 whitespace-nowrap rounded bg-gray-900 text-white text-sm py-1.5 px-3 pointer-events-none transition-opacity',\n          placementClasses[placement],\n          isVisible ? 'opacity-100' : 'opacity-0',\n          className\n        )}\n        role=\"tooltip\"\n      >\n        {content}\n        <div\n          className={classNames(\n            'absolute w-2 h-2 border-4 border-gray-900',\n            arrowClasses[placement]\n          )}\n        />\n      </div>\n      \n      {React.Children.only(children)}\n    </div>\n  );\n};\n```\n\n8. Spinner/Loader Component:\n```tsx\n// Spinner.tsx\nimport React from 'react';\nimport { classNames } from '../utils';\n\ninterface SpinnerProps {\n  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n  color?: 'primary' | 'gray' | 'white';\n  className?: string;\n}\n\nexport const Spinner: React.FC<SpinnerProps> = ({\n  size = 'md',\n  color = 'primary',\n  className,\n}) => {\n  // Size classes\n  const sizeClasses = {\n    xs: 'h-3 w-3',\n    sm: 'h-4 w-4',\n    md: 'h-6 w-6',\n    lg: 'h-8 w-8',\n    xl: 'h-12 w-12',\n  };\n  \n  // Color classes\n  const colorClasses = {\n    primary: 'text-primary-500',\n    gray: 'text-gray-500',\n    white: 'text-white',\n  };\n  \n  return (\n    <svg\n      className={classNames(\n        'animate-spin',\n        sizeClasses[size],\n        colorClasses[color],\n        className\n      )}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      aria-hidden=\"true\"\n    >\n      <circle\n        className=\"opacity-25\"\n        cx=\"12\"\n        cy=\"12\"\n        r=\"10\"\n        stroke=\"currentColor\"\n        strokeWidth=\"4\"\n      />\n      <path\n        className=\"opacity-75\"\n        fill=\"currentColor\"\n        d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n      />\n    </svg>\n  );\n};\n```\n\n9. Usage Guidelines:\n   - When to use each type of feedback component\n   - Best practices for error messages and notifications\n   - Modal usage patterns\n   - Toast notification patterns\n   - Loading state patterns",
          "complexity": 9,
          "isComplete": false,
          "createdAt": "2025-04-28T01:10:39.132Z",
          "updatedAt": "2025-04-28T01:10:39.132Z"
        },
        {
          "id": "1745803202543",
          "title": "Establish Layout System",
          "description": "Create a comprehensive layout system:\n\n1. Layout Components:\n   - Grid system\n   - Flex layout utilities\n   - Spacing system\n   - Container layouts\n   - Responsive breakpoints\n   - Stack (vertical/horizontal)\n   - Dividers\n\n2. Grid System:\n   - Fixed column grid (12-column)\n   - Auto-responsive grid\n   - Grid gap controls\n   - Responsive grid behavior\n\n3. Spacing System:\n   - Consistent spacing scale\n   - Margin and padding utilities\n   - Responsive spacing\n   - Auto-layout spacing\n\n4. TypeScript Interface for Grid:\n```typescript\ninterface GridProps {\n  columns?: number | { [key: string]: number }; // Responsive column count\n  gap?: number | string | { [key: string]: number | string };\n  rowGap?: number | string;\n  columnGap?: number | string;\n  as?: React.ElementType;\n  autoFlow?: 'row' | 'column' | 'dense' | 'row dense' | 'column dense';\n  className?: string;\n  children: React.ReactNode;\n}\n\ninterface GridItemProps {\n  colSpan?: number | { [key: string]: number };\n  rowSpan?: number | { [key: string]: number };\n  colStart?: number | { [key: string]: number };\n  rowStart?: number | { [key: string]: number };\n  as?: React.ElementType;\n  className?: string;\n  children: React.ReactNode;\n}\n```\n\n5. Grid Implementation with Tailwind:\n```tsx\n// Grid.tsx\nimport React from 'react';\nimport { classNames } from '../utils';\n\nexport const Grid: React.FC<GridProps> = ({\n  columns = 12,\n  gap,\n  rowGap,\n  columnGap,\n  as: Component = 'div',\n  autoFlow = 'row',\n  className,\n  children,\n}) => {\n  // Handle responsive columns\n  const getColumnsClass = () => {\n    if (typeof columns === 'number') {\n      return `grid-cols-${columns}`;\n    }\n    \n    // For responsive object like { sm: 2, md: 3, lg: 4 }\n    return Object.entries(columns)\n      .map(([breakpoint, value]) => {\n        return breakpoint === 'xs' \n          ? `grid-cols-${value}` \n          : `${breakpoint}:grid-cols-${value}`;\n      })\n      .join(' ');\n  };\n  \n  // Handle gap\n  const getGapClass = () => {\n    if (!gap) return '';\n    \n    if (typeof gap === 'number' || typeof gap === 'string') {\n      return `gap-${gap}`;\n    }\n    \n    // For responsive object\n    return Object.entries(gap)\n      .map(([breakpoint, value]) => {\n        return breakpoint === 'xs' \n          ? `gap-${value}` \n          : `${breakpoint}:gap-${value}`;\n      })\n      .join(' ');\n  };\n  \n  // Row gap\n  const getRowGapClass = () => {\n    if (!rowGap) return '';\n    return `row-gap-${rowGap}`;\n  };\n  \n  // Column gap\n  const getColumnGapClass = () => {\n    if (!columnGap) return '';\n    return `col-gap-${columnGap}`;\n  };\n  \n  // Auto flow\n  const getAutoFlowClass = () => {\n    return `grid-flow-${autoFlow.replace(' ', '-')}`;\n  };\n  \n  return (\n    <Component\n      className={classNames(\n        'grid',\n        getColumnsClass(),\n        getGapClass(),\n        getRowGapClass(),\n        getColumnGapClass(),\n        getAutoFlowClass(),\n        className\n      )}\n    >\n      {children}\n    </Component>\n  );\n};\n\nexport const GridItem: React.FC<GridItemProps> = ({\n  colSpan,\n  rowSpan,\n  colStart,\n  rowStart,\n  as: Component = 'div',\n  className,\n  children,\n}) => {\n  // Handle column span\n  const getColSpanClass = () => {\n    if (!colSpan) return '';\n    \n    if (typeof colSpan === 'number') {\n      return `col-span-${colSpan}`;\n    }\n    \n    // For responsive object\n    return Object.entries(colSpan)\n      .map(([breakpoint, value]) => {\n        return breakpoint === 'xs' \n          ? `col-span-${value}` \n          : `${breakpoint}:col-span-${value}`;\n      })\n      .join(' ');\n  };\n  \n  // Handle row span\n  const getRowSpanClass = () => {\n    if (!rowSpan) return '';\n    \n    if (typeof rowSpan === 'number') {\n      return `row-span-${rowSpan}`;\n    }\n    \n    // For responsive object\n    return Object.entries(rowSpan)\n      .map(([breakpoint, value]) => {\n        return breakpoint === 'xs' \n          ? `row-span-${value}` \n          : `${breakpoint}:row-span-${value}`;\n      })\n      .join(' ');\n  };\n  \n  // Handle column start\n  const getColStartClass = () => {\n    if (!colStart) return '';\n    \n    if (typeof colStart === 'number') {\n      return `col-start-${colStart}`;\n    }\n    \n    // For responsive object\n    return Object.entries(colStart)\n      .map(([breakpoint, value]) => {\n        return breakpoint === 'xs' \n          ? `col-start-${value}` \n          : `${breakpoint}:col-start-${value}`;\n      })\n      .join(' ');\n  };\n  \n  // Handle row start\n  const getRowStartClass = () => {\n    if (!rowStart) return '';\n    \n    if (typeof rowStart === 'number') {\n      return `row-start-${rowStart}`;\n    }\n    \n    // For responsive object\n    return Object.entries(rowStart)\n      .map(([breakpoint, value]) => {\n        return breakpoint === 'xs' \n          ? `row-start-${value}` \n          : `${breakpoint}:row-start-${value}`;\n      })\n      .join(' ');\n  };\n  \n  return (\n    <Component\n      className={classNames(\n        getColSpanClass(),\n        getRowSpanClass(),\n        getColStartClass(),\n        getRowStartClass(),\n        className\n      )}\n    >\n      {children}\n    </Component>\n  );\n};\n```\n\n6. Stack Component for Layout:\n```tsx\n// Stack.tsx\nimport React from 'react';\nimport { classNames } from '../utils';\n\ntype StackDirection = 'row' | 'column';\ntype StackSpacing = 0 | 0.5 | 1 | 1.5 | 2 | 2.5 | 3 | 3.5 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 14 | 16 | 20 | 24 | 28 | 32 | 36 | 40 | 44 | 48 | 52 | 56 | 60 | 64 | 72 | 80 | 96;\n\ninterface StackProps {\n  direction?: StackDirection | { [key: string]: StackDirection };\n  spacing?: StackSpacing | { [key: string]: StackSpacing };\n  align?: 'start' | 'end' | 'center' | 'baseline' | 'stretch';\n  justify?: 'start' | 'end' | 'center' | 'between' | 'around' | 'evenly';\n  wrap?: boolean;\n  as?: React.ElementType;\n  className?: string;\n  children: React.ReactNode;\n}\n\nexport const Stack: React.FC<StackProps> = ({\n  direction = 'column',\n  spacing = 4,\n  align,\n  justify,\n  wrap = false,\n  as: Component = 'div',\n  className,\n  children,\n}) => {\n  // Handle responsive direction\n  const getDirectionClass = () => {\n    if (typeof direction === 'string') {\n      return direction === 'row' ? 'flex-row' : 'flex-col';\n    }\n    \n    // For responsive object like { sm: 'row', lg: 'column' }\n    return Object.entries(direction)\n      .map(([breakpoint, value]) => {\n        const dirClass = value === 'row' ? 'flex-row' : 'flex-col';\n        return breakpoint === 'xs' \n          ? dirClass \n          : `${breakpoint}:${dirClass}`;\n      })\n      .join(' ');\n  };\n  \n  // Handle responsive spacing\n  const getSpacingClass = () => {\n    const getSpaceValue = (dir: StackDirection, space: StackSpacing) => {\n      if (space === 0) return '';\n      return dir === 'row' ? `space-x-${space}` : `space-y-${space}`;\n    };\n    \n    if (typeof spacing === 'number') {\n      if (typeof direction === 'string') {\n        return getSpaceValue(direction, spacing);\n      }\n      \n      // This is a simplification; for truly responsive spacing with responsive direction,\n      // you would need a more complex implementation\n      return getSpaceValue('column', spacing);\n    }\n    \n    // For responsive object\n    return Object.entries(spacing)\n      .map(([breakpoint, value]) => {\n        const dir = typeof direction === 'string' ? direction : direction[breakpoint] || 'column';\n        const spaceClass = getSpaceValue(dir, value);\n        \n        return breakpoint === 'xs' \n          ? spaceClass \n          : `${breakpoint}:${spaceClass}`;\n      })\n      .join(' ');\n  };\n  \n  // Alignment\n  const getAlignClass = () => {\n    if (!align) return '';\n    \n    const alignments: Record<string, string> = {\n      start: 'items-start',\n      end: 'items-end',\n      center: 'items-center',\n      baseline: 'items-baseline',\n      stretch: 'items-stretch',\n    };\n    \n    return alignments[align];\n  };\n  \n  // Justify\n  const getJustifyClass = () => {\n    if (!justify) return '';\n    \n    const justifications: Record<string, string> = {\n      start: 'justify-start',\n      end: 'justify-end',\n      center: 'justify-center',\n      between: 'justify-between',\n      around: 'justify-around',\n      evenly: 'justify-evenly',\n    };\n    \n    return justifications[justify];\n  };\n  \n  // Wrap\n  const getWrapClass = () => {\n    return wrap ? 'flex-wrap' : 'flex-nowrap';\n  };\n  \n  return (\n    <Component\n      className={classNames(\n        'flex',\n        getDirectionClass(),\n        getSpacingClass(),\n        getAlignClass(),\n        getJustifyClass(),\n        getWrapClass(),\n        className\n      )}\n    >\n      {children}\n    </Component>\n  );\n};\n```\n\n7. Divider Component:\n```tsx\n// Divider.tsx\nimport React from 'react';\nimport { classNames } from '../utils';\n\ninterface DividerProps {\n  orientation?: 'horizontal' | 'vertical';\n  variant?: 'solid' | 'dashed' | 'dotted';\n  color?: string;\n  thickness?: 'thin' | 'medium' | 'thick';\n  className?: string;\n}\n\nexport const Divider: React.FC<DividerProps> = ({\n  orientation = 'horizontal',\n  variant = 'solid',\n  color = 'gray-200',\n  thickness = 'thin',\n  className,\n}) => {\n  // Border style\n  const getVariantClass = () => {\n    switch (variant) {\n      case 'dashed':\n        return 'border-dashed';\n      case 'dotted':\n        return 'border-dotted';\n      case 'solid':\n      default:\n        return 'border-solid';\n    }\n  };\n  \n  // Border thickness\n  const getThicknessClass = () => {\n    switch (thickness) {\n      case 'medium':\n        return orientation === 'horizontal' ? 'border-t-2' : 'border-l-2';\n      case 'thick':\n        return orientation === 'horizontal' ? 'border-t-4' : 'border-l-4';\n      case 'thin':\n      default:\n        return orientation === 'horizontal' ? 'border-t' : 'border-l';\n    }\n  };\n  \n  // Orientation specific classes\n  const getOrientationClass = () => {\n    return orientation === 'horizontal'\n      ? 'w-full'\n      : 'h-full self-stretch';\n  };\n  \n  return (\n    <hr\n      className={classNames(\n        getVariantClass(),\n        getThicknessClass(),\n        getOrientationClass(),\n        `border-${color}`,\n        className\n      )}\n      aria-orientation={orientation}\n    />\n  );\n};\n```\n\n8. Documentation for the Layout System:\n   - Breakpoints:\n     - xs: 0px (default)\n     - sm: 640px\n     - md: 768px\n     - lg: 1024px\n     - xl: 1280px\n     - 2xl: 1536px\n   \n   - Container Max Widths:\n     - sm: 640px\n     - md: 768px\n     - lg: 1024px\n     - xl: 1280px\n     - 2xl: 1536px\n     - full: 100%\n   \n   - Spacing Scale:\n     - Based on a 4px (0.25rem) unit\n     - 0: 0px\n     - 1: 0.25rem (4px)\n     - 2: 0.5rem (8px)\n     - 3: 0.75rem (12px)\n     - 4: 1rem (16px)\n     - 5: 1.25rem (20px)\n     - 6: 1.5rem (24px)\n     - etc.\n   \n   - Grid System:\n     - 12-column grid by default\n     - Responsive grid configurations\n     - Auto-flow options\n   \n   - Layout Patterns:\n     - Sidebar layouts\n     - Split layouts\n     - Card grids\n     - Content-sidebar layout\n     - Dashboard layouts\n     - Multi-level navigation layouts\n\n9. Usage Guidelines:\n   - Mobile-first development\n   - When to use Grid vs Flex layouts\n   - Handling responsive breakpoints\n   - Layout composability patterns\n   - Performance considerations for layouts",
          "complexity": 8,
          "isComplete": false,
          "createdAt": "2025-04-28T01:20:02.543Z",
          "updatedAt": "2025-04-28T01:20:02.543Z"
        },
        {
          "id": "1745803234388",
          "title": "# UI/UX Design Guide for React + TypeScript + Tailwind CSS",
          "description": "# UI/UX Design Guide for React + TypeScript + Tailwind CSS",
          "complexity": 5,
          "isComplete": false,
          "createdAt": "2025-04-28T01:20:34.388Z",
          "updatedAt": "2025-04-28T01:20:34.388Z"
        },
        {
          "id": "1745803234390",
          "title": "## Overview",
          "description": "## Overview",
          "complexity": 5,
          "isComplete": false,
          "createdAt": "2025-04-28T01:20:34.390Z",
          "updatedAt": "2025-04-28T01:20:34.390Z"
        },
        {
          "id": "1745803234393",
          "title": "This document outlines a comprehensive UI/UX design guide for a React + TypeScript + Tailwind CSS project. The guide is structured to provide detailed specifications for all UI components and design patterns needed to create a consistent, accessible, and maintainable design system.",
          "description": "This document outlines a comprehensive UI/UX design guide for a React + TypeScript + Tailwind CSS project. The guide is structured to provide detailed specifications for all UI components and design patterns needed to create a consistent, accessible, and maintainable design system.",
          "complexity": 5,
          "isComplete": false,
          "createdAt": "2025-04-28T01:20:34.393Z",
          "updatedAt": "2025-04-28T01:20:34.393Z"
        },
        {
          "id": "1745803234393",
          "title": "## Components and Systems",
          "description": "## Components and Systems",
          "complexity": 5,
          "isComplete": false,
          "createdAt": "2025-04-28T01:20:34.393Z",
          "updatedAt": "2025-04-28T01:20:34.393Z"
        },
        {
          "id": "1745803234396",
          "title": "The design guide includes the following core components and systems:",
          "description": "The design guide includes the following core components and systems:",
          "complexity": 5,
          "isComplete": false,
          "createdAt": "2025-04-28T01:20:34.396Z",
          "updatedAt": "2025-04-28T01:20:34.396Z"
        },
        {
          "id": "1745803234397",
          "title": "### 1. Design Tokens",
          "description": "### 1. Design Tokens\n- Color system with primary, secondary, accent, and semantic colors\n- Typography system with font families, sizes, weights, and styles\n- Spacing system based on a consistent scale\n- Shadows and elevation levels\n- Border radii and styling",
          "complexity": 5,
          "isComplete": false,
          "createdAt": "2025-04-28T01:20:34.397Z",
          "updatedAt": "2025-04-28T01:20:34.397Z"
        },
        {
          "id": "1745803234398",
          "title": "### 2. Core UI Components",
          "description": "### 2. Core UI Components\n- Button system with variants, sizes, and states\n- Icon system with sizing and color inheritance\n- Form components (inputs, checkboxes, selects, etc.)\n- Card and container components\n- Navigation components (tabs, breadcrumbs, pagination)\n- Feedback components (alerts, toasts, modals, tooltips)\n- Data display components",
          "complexity": 5,
          "isComplete": false,
          "createdAt": "2025-04-28T01:20:34.398Z",
          "updatedAt": "2025-04-28T01:20:34.398Z"
        },
        {
          "id": "1745803234400",
          "title": "### 3. Layout System",
          "description": "### 3. Layout System\n- Grid system with responsive support\n- Stack component for flexible layouts\n- Spacing utilities\n- Responsive breakpoints\n- Container layouts",
          "complexity": 5,
          "isComplete": false,
          "createdAt": "2025-04-28T01:20:34.400Z",
          "updatedAt": "2025-04-28T01:20:34.400Z"
        },
        {
          "id": "1745803234400",
          "title": "## Implementation",
          "description": "## Implementation",
          "complexity": 5,
          "isComplete": false,
          "createdAt": "2025-04-28T01:20:34.400Z",
          "updatedAt": "2025-04-28T01:20:34.400Z"
        },
        {
          "id": "1745803234401",
          "title": "Each component is detailed with:",
          "description": "Each component is detailed with:\n- TypeScript interfaces for type safety\n- Tailwind CSS implementation\n- Variants and customization options\n- Accessibility considerations\n- Usage guidelines and best practices",
          "complexity": 5,
          "isComplete": false,
          "createdAt": "2025-04-28T01:20:34.401Z",
          "updatedAt": "2025-04-28T01:20:34.401Z"
        },
        {
          "id": "1745803234403",
          "title": "## Development Approach",
          "description": "## Development Approach",
          "complexity": 5,
          "isComplete": false,
          "createdAt": "2025-04-28T01:20:34.403Z",
          "updatedAt": "2025-04-28T01:20:34.403Z"
        },
        {
          "id": "1745803234404",
          "title": "The design system will follow an atomic design methodology:",
          "description": "The design system will follow an atomic design methodology:\n1. Atoms (basic building blocks like buttons, inputs)\n2. Molecules (combinations of atoms like form groups)\n3. Organisms (complex UI patterns like headers, navigation bars)\n4. Templates (page layouts and structures)\n5. Pages (specific instances of templates)",
          "complexity": 5,
          "isComplete": false,
          "createdAt": "2025-04-28T01:20:34.404Z",
          "updatedAt": "2025-04-28T01:20:34.404Z"
        },
        {
          "id": "1745803234406",
          "title": "## Future Enhancements",
          "description": "## Future Enhancements",
          "complexity": 5,
          "isComplete": false,
          "createdAt": "2025-04-28T01:20:34.406Z",
          "updatedAt": "2025-04-28T01:20:34.406Z"
        },
        {
          "id": "1745803234407",
          "title": "- Theme switching capabilities (light/dark mode)",
          "description": "- Theme switching capabilities (light/dark mode)\n- Animation and transition library\n- Extended component variants\n- Additional accessibility improvements\n- Performance optimizations",
          "complexity": 5,
          "isComplete": false,
          "createdAt": "2025-04-28T01:20:34.407Z",
          "updatedAt": "2025-04-28T01:20:34.407Z"
        },
        {
          "id": "1745803234409",
          "title": "## Next Steps",
          "description": "## Next Steps",
          "complexity": 5,
          "isComplete": false,
          "createdAt": "2025-04-28T01:20:34.409Z",
          "updatedAt": "2025-04-28T01:20:34.409Z"
        },
        {
          "id": "1745803234412",
          "title": "Implement design tokens in Tailwind configuration",
          "description": "2. Develop core component library\n3. Create documentation site with examples\n4. Establish integration with existing codebase\n5. Develop testing strategy for components",
          "complexity": 5,
          "isComplete": false,
          "createdAt": "2025-04-28T01:20:34.412Z",
          "updatedAt": "2025-04-28T01:20:34.412Z"
        }
      ],
      "updatedAt": "2025-04-28T01:20:34.412Z"
    }
  }
}